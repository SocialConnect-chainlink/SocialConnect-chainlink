{
  "version": 3,
  "sources": ["../src/common/icon/circle_close.svg", "../src/api/model/authError.ts", "../src/utils/index.ts", "../src/context/hooks/useAuthCore.ts", "../src/context/index.tsx", "../src/components/customRouter/index.tsx", "../src/components/loading/index.tsx", "../src/components/particle-modal/index.tsx", "../src/components/particle-drawer/index.tsx", "../src/components/icon/circle-close.tsx", "../src/components/particle-modal/authCoreModalContainer.tsx", "../src/i18n.ts", "../src/locales/resources.ts", "../src/utils/authorizeUtils.ts", "../src/api/getPublicAddress.ts", "../src/utils/chain-utils.ts", "../src/utils/common-utils.ts", "../src/utils/sendAnalyticsActive.ts", "../src/utils/version.ts", "../src/context/types.ts", "../src/context/web3ModalProvider.tsx", "../src/context/hooks/useConnect.ts", "../src/context/hooks/useLogin.ts", "../src/repository/index.ts", "../src/api/model/bundle.ts", "../src/api/master-password.ts", "../src/context/hooks/useCustomize.ts", "../src/context/hooks/useEthereum.ts", "../src/utils/evmSendTransaction.ts", "../src/utils/number-utils.ts", "../src/utils/transaction-utils.ts", "../src/context/evmProvider.ts", "../src/context/hooks/useUserInfo.ts", "../src/context/hooks/useIsMounted.ts", "../src/context/hooks/useSolana.ts", "../src/context/solanaWallet.ts", "../src/common/config/index.ts"],
  "sourcesContent": ["import * as React from \"react\";\nfunction MyComponent(props) {\n  return <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewBox=\"0 0 28 28\" {...props}><circle cx={14} cy={14} r={14} opacity={0.08} /><rect width={1.368} height={12.992} rx={0.684} transform=\"rotate(-45 16.924 -5.61)\" /><rect width={1.368} height={12.992} rx={0.684} transform=\"rotate(45 -2.24 26.54)\" /></svg>;\n}\nexport default MyComponent;", "export class AuthError {\n    constructor(public code: number, public message: string) {\n        this.code = code;\n        this.message = message;\n    }\n\n    public static feeError() {\n        return new AuthError(8101, 'maxFeePerGas cannot be less than maxPriorityFeePerGas');\n    }\n\n    public static userRejectedRequest() {\n        return new AuthError(4001, 'The user rejected the request');\n    }\n\n    public static userCancelOperation() {\n        return new AuthError(4011, 'The user cancel the operation');\n    }\n\n    public static unauthorized() {\n        return new AuthError(4100, 'The requested method and/or account has not been authorized by the user');\n    }\n\n    public static systemError() {\n        return new AuthError(8001, 'System Error');\n    }\n\n    public static paramsError() {\n        return new AuthError(8002, 'Param error, see doc for more info');\n    }\n\n    public static notLogin() {\n        return new AuthError(8005, 'Please connect first!');\n    }\n\n    public static walletNotCreated() {\n        return new AuthError(8006, 'Wallet not created');\n    }\n\n    public static authorizeError() {\n        return new AuthError(8007, 'Authorize error');\n    }\n\n    public static network() {\n        return new AuthError(8011, 'Network error');\n    }\n\n    public static unknown(message: string) {\n        return new AuthError(9000, message);\n    }\n\n    public static pending(method: string) {\n        return new AuthError(-32002, `Request of type ${method} already pending, please wait.`);\n    }\n}\n", "import type { CountryCode } from 'libphonenumber-js/max';\nimport { isValidPhoneNumber, parsePhoneNumberWithError } from 'libphonenumber-js/max';\n\nexport const ipfsToSrc = (ipfs: string) => {\n    if (!ipfs || !ipfs.startsWith('ipfs://')) {\n        return ipfs || '';\n    }\n\n    return `https://ipfs.particle.network/${encodeURI(ipfs.slice(7))}`;\n};\n\nexport const EmailRegExp = /^\\w+([-+.]\\w+)*@[a-zA-Z0-9]+([.-][a-zA-Z0-9]+)*\\.[a-zA-Z0-9]+([.-][a-zA-Z0-9]+)*$/;\n\nexport const PhoneRegExp = /^[0-9]{4,16}$/;\n\nexport const PhoneE164Exp = /^\\+[1-9]\\d{4,14}$/;\n\nexport function isValidEmail(email?: string) {\n    if (email && EmailRegExp.test(email)) {\n        return email;\n    }\n}\n\nexport function isPhoneValid(phone: string, regionCode: string): boolean {\n    if (!phone || phone.length < 5) {\n        return false;\n    }\n    const countryCode = regionCode?.toUpperCase() as CountryCode;\n    const result = isValidPhoneNumber(phone, countryCode);\n    return result;\n}\n\nexport const isValidE164PhoneNumber = (phone: string | undefined) => {\n    if (phone && PhoneE164Exp.test(phone)) {\n        try {\n            if (isValidPhoneNumber(phone)) {\n                const e164Phone = parsePhoneNumberWithError(phone).format('E.164');\n                return e164Phone;\n            }\n        } catch (e) {\n            // ignore\n        }\n    }\n};\n\nexport function isValidCaptcha(code?: string) {\n    return code && code.match(/^\\d{6}$/);\n}\n\nexport const isAutoFocusSupported = () => {\n    return true;\n};\n\nexport const isMobile = () => {\n    if (isServer()) return false;\n    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n};\n\nexport const isServer = () => typeof window === 'undefined';\n\nexport const isClient = () => typeof window !== 'undefined';\n", "import {\n    AuthCoreEvent,\n    getSecurityAccount,\n    hasMasterPassword,\n    hasPaymentPassword,\n    isConnected,\n    isNeedRestoreWallet,\n    particleAuth,\n} from '@particle-network/auth-core';\nimport { walletEntryPlugin, type WalletConfig } from '@particle-network/wallet';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useCustomNavigate, useParticleAuth } from '..';\nimport { AuthError } from '../../api/model/authError';\nimport globalConfig from '../../common/config';\nimport { AuthPage } from '../../components/customRouter';\nimport { PageType } from '../../pages/account/accountVerify/config';\nimport { sendAnalyticsActive } from '../../utils/sendAnalyticsActive';\nimport type { OpenBuyOptions, OpenBuyOptionsKeys } from '../types';\n\ninterface OpenWalletOptions {\n    windowSize?: 'small' | 'large';\n    pathName?: string;\n    query?: Record<string, unknown>;\n    topMenuType?: 'close' | 'fullscreen';\n}\n\nexport const useAuthCore = () => {\n    const navigate = useCustomNavigate();\n    const { userInfo, modalOptions } = useParticleAuth();\n    const [needRestoreWallet, setNeedRestoreWallet] = useState(isNeedRestoreWallet());\n\n    const openAccountAndSecurity = useCallback(() => {\n        navigate(AuthPage.AccountSecurity);\n    }, [navigate]);\n\n    const openSetMasterPassword = useCallback(() => {\n        if (hasMasterPassword()) {\n            throw new Error('Master password already exists.');\n        }\n        navigate('account/master-password');\n    }, [navigate]);\n\n    const openChangeMasterPassword = useCallback(() => {\n        if (!hasMasterPassword()) {\n            throw new Error('Master password not exist, please set it first!');\n        }\n        if (isNeedRestoreWallet()) {\n            throw new Error('Wallet not restore, please restore it by master password first!');\n        }\n        navigate('account/master-password/change');\n    }, [navigate]);\n\n    const openRestoreByMasterPassword = useCallback(() => {\n        if (!hasMasterPassword()) {\n            throw new Error('Master password not exists.');\n        }\n        if (!isNeedRestoreWallet()) {\n            throw new Error('Wallet has been restore.');\n        }\n        navigate(AuthPage.MasterPasswordVerify);\n    }, [navigate]);\n\n    const openWallet = useCallback((options?: OpenWalletOptions) => {\n        const { windowSize, pathName, query, topMenuType } = options || {};\n        if (!isConnected()) {\n            throw AuthError.notLogin();\n        }\n        walletEntryPlugin.openWallet({\n            windowSize: windowSize || 'large',\n            pathName: pathName || '/',\n            query,\n            topMenuType,\n        });\n        sendAnalyticsActive('open_wallet');\n    }, []);\n\n    const buildWalletUrl = useCallback((options?: WalletConfig): string => {\n        if (!isConnected()) {\n            throw AuthError.notLogin();\n        }\n        return walletEntryPlugin.getWalletUrl(options);\n    }, []);\n\n    const openBuy = useCallback(\n        (options?: OpenBuyOptions) => {\n            let url = `${globalConfig.env.buyUrl}/?language=${modalOptions.language || 'en'}&theme=${\n                modalOptions.themeType || 'light'\n            }`;\n            if (modalOptions.wallet?.customStyle) {\n                const { light, dark } = modalOptions.wallet.customStyle;\n                url += `&customStyle=${encodeURIComponent(\n                    Buffer.from(JSON.stringify({ light, dark })).toString('base64')\n                )}`;\n            }\n\n            if (options) {\n                Object.keys(options).forEach((key) => {\n                    const value = options[key as OpenBuyOptionsKeys];\n                    if (value) {\n                        url += `&${key}=${encodeURIComponent(value)}`;\n                    }\n                });\n            }\n            if (typeof window !== 'undefined') {\n                window.open(url);\n            }\n        },\n        [modalOptions.wallet, modalOptions.themeType, modalOptions.language]\n    );\n\n    const openSetPaymentPassword = useCallback(\n        (securityAccountEmailOrPhone: string) => {\n            const securityAccount = getSecurityAccount();\n            if (!securityAccount.email && !securityAccount.phone) {\n                throw new Error('Please set security account first!');\n            }\n            if (hasPaymentPassword()) {\n                throw new Error('Payment password already exists.');\n            }\n\n            if (\n                securityAccountEmailOrPhone &&\n                securityAccountEmailOrPhone !== securityAccount.email &&\n                securityAccountEmailOrPhone !== securityAccount.phone\n            ) {\n                throw new Error('Invalid security account.');\n            }\n            navigate('account/set-password', {\n                state: {\n                    account: securityAccountEmailOrPhone,\n                },\n            });\n        },\n        [navigate]\n    );\n\n    const openChangePaymentPassword = useCallback(() => {\n        if (!hasPaymentPassword()) {\n            throw new Error('Payment password not exists.');\n        }\n        navigate('account/change-password');\n    }, [navigate]);\n\n    const openSetSecurityAccount = useCallback(() => {\n        const securityAccount = getSecurityAccount();\n        if (securityAccount.email && securityAccount.phone) {\n            throw new Error('Security account already exists.');\n        }\n\n        const showSwitch = !securityAccount.email && !securityAccount.phone;\n\n        if ((securityAccount.email && !securityAccount.phone) || (!securityAccount.email && securityAccount.phone)) {\n            navigate('/account/verify', {\n                state: {\n                    account: securityAccount.email || securityAccount.phone,\n                    authType: securityAccount.email ? 'phone' : 'email',\n                    redirectUrl: '/account/security',\n                    pageType: PageType.VerifySecurityAccount_SetSecurityAccount,\n                },\n            });\n        } else {\n            if (userInfo?.email && !securityAccount.phone) {\n                navigate('account/bind', {\n                    state: { showSwitch, accountType: 'phone', redirectUrl: AuthPage.AccountSecurity },\n                });\n            } else if (!securityAccount.email) {\n                navigate('account/bind', {\n                    state: { showSwitch, accountType: 'email', redirectUrl: AuthPage.AccountSecurity },\n                });\n            } else {\n                navigate('account/bind', {\n                    state: { showSwitch, accountType: 'phone', redirectUrl: AuthPage.AccountSecurity },\n                });\n            }\n        }\n    }, [navigate, userInfo]);\n\n    const openLinkLoginAccount = useCallback(() => {\n        const securityAccount = getSecurityAccount();\n        if (!securityAccount.email && !securityAccount.phone) {\n            throw new Error('Please set security account first!');\n        }\n        navigate(AuthPage.LoginAccount);\n    }, [navigate]);\n\n    useEffect(() => {\n        if (userInfo) {\n            setNeedRestoreWallet(isNeedRestoreWallet());\n        } else {\n            setNeedRestoreWallet(false);\n        }\n    }, [userInfo]);\n\n    useEffect(() => {\n        const onWalletRestored = () => {\n            setNeedRestoreWallet(isNeedRestoreWallet());\n        };\n        particleAuth.on(AuthCoreEvent.ParticleWalletRestored, onWalletRestored);\n        return () => {\n            particleAuth.off(AuthCoreEvent.ParticleWalletRestored, onWalletRestored);\n        };\n    }, []);\n\n    return {\n        userInfo,\n        needRestoreWallet,\n        openAccountAndSecurity,\n        openSetMasterPassword,\n        openChangeMasterPassword,\n        openRestoreByMasterPassword,\n        openSetPaymentPassword,\n        openChangePaymentPassword,\n        openSetSecurityAccount,\n        openLinkLoginAccount,\n        openWallet,\n        buildWalletUrl,\n        openBuy,\n    };\n};\n", "import type { LoginAuthorization, SolanaAuthorization, UserInfo } from '@particle-network/auth-core';\nimport {\n    AuthCoreEvent,\n    EvmRpcMethod,\n    SolanaRpcMethod,\n    connect,\n    getConnectCaptcha,\n    getUserInfo,\n    hasPaymentPassword,\n    isConnected,\n    particleAuth,\n    syncUserInfo,\n} from '@particle-network/auth-core';\nimport { useSetState, useSize } from 'ahooks';\nimport base58 from 'bs58';\nimport { EventEmitter } from 'events';\nimport React, { createContext, useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport root from 'react-shadow';\nimport { AuthError } from '../api/model/authError';\nimport CustomRouter, { AuthPage } from '../components/customRouter';\nimport ParticleModal from '../components/particle-modal';\nimport AuthCoreModalContainer from '../components/particle-modal/authCoreModalContainer';\nimport i18n, { i18nInit } from '../i18n';\nimport type { AccountTipModalProps } from '../pages/account/accountTipModal';\nimport type { PaymentVerify } from '../pages/account/paymentVerifyModal';\nimport type { WrongPasswordInfo } from '../pages/account/wrongPasswordModal';\nimport { isServer } from '../utils';\nimport authorizeUtils from '../utils/authorizeUtils';\nimport { isSolana } from '../utils/chain-utils';\nimport { toHexPrefixString } from '../utils/common-utils';\nimport { sendAnalyticsActive } from '../utils/sendAnalyticsActive';\nimport { getVersion } from '../utils/version';\nimport type {\n    AuthCoreModalOptions,\n    ConnectionStatus,\n    IAuthCoreModal,\n    ICustomRouter,\n    NavigateOptions,\n    SocialConnectCallback,\n    ViewType,\n} from './types';\nimport { AuthCoreModalEvent } from './types';\nimport Web3ModalProvider from './web3ModalProvider';\n\nconst IframeWalletPlugin = React.lazy(() => import('./iframeWalletPlugin'));\nconst AccountTipModal = React.lazy(() => import('../pages/account/accountTipModal'));\nconst PaymentVerifyModal = React.lazy(() => import('../pages/account/paymentVerifyModal'));\nconst WrongPasswordModal = React.lazy(() => import('../pages/account/wrongPasswordModal'));\nconst SelectSecurityAccount = React.lazy(() => import('../pages/account/selectSecurityAccount'));\n\nif (!isServer()) {\n    // @ts-ignore\n    window.particleI18n = i18n;\n}\n\nexport const defaultModalOptions = {\n    projectId: '',\n    clientKey: '',\n    appId: '',\n    themeType: 'light',\n    language: 'en',\n    fiatCoin: 'USD',\n    promptSettingConfig: {\n        promptPaymentPasswordSettingWhenSign: 1,\n        promptMasterPasswordSettingWhenLogin: 0,\n    },\n    customStyle: {\n        modalWidth: 400,\n        modalHeight: 650,\n    },\n    wallet: { visible: true, themeType: 'light' },\n};\n\ninterface GlobalState {\n    connectionStatus: ConnectionStatus;\n    setConnectionStatus: (status: ConnectionStatus) => void;\n    userInfo?: UserInfo;\n    modalOptions: AuthCoreModalOptions;\n    setModalOptions: (options: any) => void;\n    showSelectSecurityAccount: (display: boolean, state?: any) => void;\n    setWrongPassword: (info: WrongPasswordInfo) => void;\n    setPaymentVerify: (props: PaymentVerify) => void;\n    showAccountTipModal: (props: AccountTipModalProps) => void;\n    setPaymentPassword: () => void;\n    loginSuccessRedirectToApp: () => void;\n    events: EventEmitter;\n    authCoreModal: IAuthCoreModal;\n    setAuthCoreModal: (params: any) => void;\n    customRouter: ICustomRouter;\n    setCustomRouter: (params: any) => void;\n    customNavigate: (url: string | number, options?: NavigateOptions) => void;\n    setLoginAuthorization: (loginAuthorization?: LoginAuthorization) => void;\n    authCoreModalClose: () => void;\n    socialConnectCallback?: SocialConnectCallback;\n    setSocialConnectCallback: (callback?: SocialConnectCallback) => void;\n}\n\nconst defaultData: GlobalState = {\n    connectionStatus: 'loading',\n    setConnectionStatus: (status) => {},\n    modalOptions: defaultModalOptions as AuthCoreModalOptions,\n    setModalOptions: (options) => {},\n    showSelectSecurityAccount: (display) => {},\n    setWrongPassword: (info) => {},\n    setPaymentVerify: (props) => {},\n    showAccountTipModal: (props) => {},\n    setPaymentPassword: () => {},\n    loginSuccessRedirectToApp: () => {},\n    events: {} as any,\n    authCoreModal: {} as IAuthCoreModal,\n    setAuthCoreModal: (params) => {},\n    customRouter: {\n        path: '/',\n    } as ICustomRouter,\n    setCustomRouter: (params) => {},\n    customNavigate: (url, options) => {},\n    setLoginAuthorization: (authorization) => {},\n    authCoreModalClose: () => {},\n    setSocialConnectCallback: () => {},\n};\n\nexport const GlobalContext = createContext<GlobalState>(defaultData);\n\nconst events = new EventEmitter();\nevents.setMaxListeners(100);\n\nexport const AuthCoreContextProvider = (props: { options: AuthCoreModalOptions; children: React.ReactNode }) => {\n    const [userInfo, setUserInfo] = useState<UserInfo | undefined>();\n    const rootRef = React.useRef<HTMLDivElement>(null);\n\n    const [styles, setStyles] = useState<any>({\n        styleList: [\n            {\n                name: 'antStyle',\n                loadStyle: () => import('../../../../node_modules/antd/dist/antd.css'),\n                styleContent: '',\n            },\n            {\n                name: 'globalStyle',\n                loadStyle: () => import('../common/style/global.scss'),\n                styleContent: '',\n            },\n            {\n                name: 'scrollStyle',\n                loadStyle: () => import('../common/style/scroll.scss'),\n                styleContent: '',\n            },\n            {\n                name: 'themeStyle',\n                loadStyle: () => import('../common/style/theme.scss'),\n                styleContent: '',\n            },\n        ],\n    });\n\n    const [modalOptions, setModalOptions] = useSetState<AuthCoreModalOptions>({\n        ...(defaultModalOptions as AuthCoreModalOptions),\n    });\n\n    const [selectSecurityAccount, setSelectSecurityAccount] = useState(false);\n\n    const [verifySecurityAccountState, setVerifySecurityAccountState] = useState<any>();\n\n    const [wrongPassword, setWrongPassword] = useState<WrongPasswordInfo>({ visible: false });\n\n    const [accountTipModal, setAccountTipModal] = useState<AccountTipModalProps>({\n        visible: false,\n    });\n\n    const initParticleAuthRef = React.useRef<any>(false);\n\n    const [paymentVerify, setPaymentVerify] = useState<PaymentVerify>({ visible: false });\n\n    const [loginAuthorization, setLoginAuthorization] = useState<LoginAuthorization>();\n\n    const [connectionStatus, setConnectionStatus] = useState<ConnectionStatus>(defaultData.connectionStatus);\n\n    const showSelectSecurityAccount = (display: boolean, state?: any) => {\n        setVerifySecurityAccountState(state);\n        setSelectSecurityAccount(display);\n    };\n\n    const showAccountTipModal = (props: AccountTipModalProps) => {\n        setAccountTipModal(props);\n    };\n\n    const loadStyles = () => {\n        const fns = styles.styleList.map((item: any) => {\n            return item?.loadStyle?.();\n        });\n        Promise.all(fns).then((styles: any) => {\n            const styleList = styles.map((item: any) => {\n                return {\n                    styleContent: item.default,\n                };\n            });\n            setStyles({\n                styleList,\n            });\n        });\n    };\n\n    const [customRouter, setCustomRouter] = useSetState<ICustomRouter>({ path: '/' });\n    const [authCoreModal, setAuthCoreModal] = useSetState<IAuthCoreModal>({\n        viewType: 'mobile' as ViewType,\n        particleModalVisible: false,\n        rootModalContainer: null,\n        rootBody: null,\n        closable: true,\n    });\n\n    const customNavigate = useCallback(\n        (url: string | number, options?: NavigateOptions) => {\n            if (typeof url === 'string' && url !== '/') {\n                url = url.replace(/^\\//, '');\n            }\n\n            console.log('customNavigate', url, options);\n\n            let { history } = customRouter;\n\n            if (!history) {\n                history = [];\n            }\n\n            if (options?.back === true) {\n                if (\n                    typeof url === 'string' &&\n                    !!history.find((item: any) => item.path.replace(/^\\//, '') === (url as string).replace(/^\\//, ''))\n                ) {\n                    url = history.findIndex((item) => item.path === url) - history.length + 1;\n                }\n            }\n\n            if (typeof url === 'string') {\n                if (url !== AuthPage.Login && url !== AuthPage.Index && !isConnected()) {\n                    throw AuthError.notLogin();\n                }\n\n                const { replace = false, state = {} } = options || {};\n\n                if (history.length && replace) {\n                    history.pop();\n                }\n\n                history.push({\n                    path: url,\n                    state,\n                    updateAt: new Date().getTime(),\n                });\n\n                setCustomRouter({\n                    path: url,\n                    replace,\n                    state,\n                    history,\n                });\n            } else if (typeof url === 'number' && history.length > 0) {\n                for (let i = 0; i < Math.abs(url); i++) {\n                    history.pop();\n                }\n\n                if (history.length === 0) {\n                    setAuthCoreModal({\n                        particleModalVisible: false,\n                    });\n                    return;\n                }\n\n                const route = history[history.length - 1];\n                setCustomRouter({\n                    path: route?.path,\n                    replace: false,\n                    state: route?.state,\n                    history,\n                });\n            }\n        },\n        [customRouter, setAuthCoreModal, setCustomRouter]\n    );\n\n    const setPaymentPassword = useCallback(() => {\n        if (userInfo?.security_account?.has_set_payment_password) {\n            return;\n        }\n        if (!userInfo?.security_account?.email && !userInfo?.security_account?.phone) {\n            customNavigate('/account/bind', {\n                state: {\n                    accountType: userInfo?.email ? 'phone' : 'email',\n                    showSwitch: true,\n                    redirectUrl: '/account/set-password',\n                },\n            });\n            return;\n        }\n        if (userInfo?.security_account?.email && userInfo?.security_account?.phone) {\n            showSelectSecurityAccount(true);\n        } else {\n            customNavigate('/account/set-password', {\n                state: {\n                    account: userInfo?.security_account?.email || userInfo?.security_account?.phone,\n                },\n            });\n        }\n    }, [userInfo, customNavigate]);\n\n    const loginSuccessRedirectToApp = useCallback(() => {\n        console.log('login success', 'redirectToApp');\n\n        let authorizeResult;\n        if (loginAuthorization && authorizeUtils.isNeedAuthorize(loginAuthorization)) {\n            if (hasPaymentPassword()) {\n                if (isSolana(loginAuthorization.chain)) {\n                    const message = (loginAuthorization.authorization as SolanaAuthorization).message;\n                    customNavigate(AuthPage.SolanaSign, {\n                        state: {\n                            method: SolanaRpcMethod.signMessage,\n                            param: base58.decode(message),\n                            loginAuthorizationSign: true,\n                        },\n                    });\n                } else {\n                    authorizeUtils\n                        .generateMessage(loginAuthorization.chain, modalOptions.erc4337)\n                        .then((message) => {\n                            customNavigate(AuthPage.EvmSign, {\n                                state: {\n                                    method: loginAuthorization.authorization.uniq\n                                        ? EvmRpcMethod.personalSignUniq\n                                        : EvmRpcMethod.personalSign,\n                                    param: toHexPrefixString(message),\n                                    loginAuthorizationSign: true,\n                                },\n                            });\n                        })\n                        .catch((error) => {\n                            events.emit(AuthCoreModalEvent.LoginFail, error);\n                        });\n                }\n                return;\n            } else {\n                authorizeUtils\n                    .authorize(loginAuthorization, modalOptions.erc4337)\n                    .then((result) => {\n                        events.emit(AuthCoreModalEvent.LoginSuccess, {\n                            ...userInfo,\n                            authorization: result,\n                        });\n                    })\n                    .catch((error) => {\n                        events.emit(AuthCoreModalEvent.LoginFail, error);\n                    });\n            }\n        } else {\n            events.emit(AuthCoreModalEvent.LoginSuccess, {\n                ...(userInfo ?? getUserInfo()),\n                authorization: authorizeResult,\n            });\n        }\n    }, [customNavigate, userInfo, modalOptions.erc4337, loginAuthorization]);\n\n    const authCoreModalClose = () => {\n        if (events.listenerCount(AuthCoreModalEvent.SignResponse) > 0) {\n            events.emit(AuthCoreModalEvent.SignResponse, {\n                error: AuthError.userRejectedRequest(),\n            });\n        }\n\n        if (events.listenerCount(AuthCoreModalEvent.LoginSuccess)) {\n            if (customRouter?.path === AuthPage.Login || !userInfo) {\n                events.emit(AuthCoreModalEvent.LoginFail, AuthError.userCancelOperation());\n            } else {\n                events.emit(AuthCoreModalEvent.LoginSuccess, userInfo);\n            }\n        }\n\n        setAuthCoreModal({\n            particleModalVisible: false,\n        });\n    };\n\n    const getPageHTML = () => {\n        let htmlContent = rootRef.current?.outerHTML || '';\n        const path = rootRef.current?.getAttribute('data-path');\n        htmlContent = Buffer.from(htmlContent).toString('base64');\n        console.log('getPageHTML', path, htmlContent.substring(0, 30) + '...');\n        return htmlContent;\n    };\n\n    const fontStyle = useMemo(() => {\n        let style = '';\n        if (!isServer()) {\n            const bodyFontFamily = window.getComputedStyle(window.document.body).fontFamily;\n            const fontFamily =\n                props.options?.customStyle?.fontFamily ||\n                bodyFontFamily ||\n                '\"PingFang SC\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif';\n\n            style = ` \n                            .particle-auth-core-shadow-root {\n                                --auth-core-font-family: ${fontFamily};\n                            }\n                        `;\n        }\n\n        return style;\n    }, [props.options?.customStyle?.fontFamily]);\n\n    // \u81EA\u5B9A\u4E49 \u4E3B\u9898\n    const customThemeStyle = useMemo(() => {\n        const themeType = modalOptions.themeType;\n        const customStyle = modalOptions.customStyle || {};\n\n        const theme = {\n            ...Object.fromEntries(\n                Object.keys(customStyle || {})\n                    .filter((key) => key !== 'theme')\n                    .map((key) => {\n                        return [key, (customStyle as any)?.[key] || ''];\n                    })\n            ),\n\n            ...(customStyle?.theme?.[themeType === 'light' ? 'light' : 'dark'] || {}),\n        };\n\n        const styleContent = Object.keys(theme)\n            .filter((key) => key !== 'fontFamily')\n            .map((key) => {\n                const name = key.replace(/([A-Z])/g, '-$1').toLowerCase();\n                let value = theme[key as keyof typeof theme];\n                if (!isNaN(Number(value))) {\n                    value = value + 'px';\n                }\n                return `--${name}:${value};`;\n            })\n            .join('\\n');\n\n        if (themeType === 'dark') {\n            return `.particle-auth-core-shadow-root.dark{\n                    ${styleContent}\n                }`;\n        }\n\n        return `.particle-auth-core-shadow-root{\n            ${styleContent}\n        }`;\n    }, [modalOptions.themeType, modalOptions.customStyle]);\n\n    useEffect(() => {\n        setModalOptions({\n            ...defaultData.modalOptions,\n            ...props.options,\n            promptSettingConfig: {\n                ...defaultData.modalOptions.promptSettingConfig,\n                ...props.options.promptSettingConfig,\n            },\n            customStyle: {\n                ...defaultData.modalOptions.customStyle,\n                ...props.options.customStyle,\n            },\n        });\n    }, [props.options, setModalOptions]);\n\n    useEffect(() => {\n        // \u5F39\u51FA\u7A97\u53E3\u540E \u9501\u5B9Abody \u6EDA\u52A8\n        if (!document.querySelector('.particle-auth-core-body-style')) {\n            const style = document.createElement('style');\n            style.classList.add('particle-auth-core-body-style');\n            const styleContent = `.particle-modal-lock {\n                overflow: hidden !important;\n            }`;\n            style.innerHTML = styleContent;\n            document.head.appendChild(style);\n        }\n\n        if (authCoreModal.particleModalVisible) {\n            document.body.classList.add('particle-modal-lock');\n            const rootBody = authCoreModal.rootModalContainer?.querySelector(\n                '.root-particle-modal-container .ant-drawer-body,.root-particle-modal-container .ant-modal-body'\n            ) as HTMLDivElement;\n            setAuthCoreModal({\n                rootBody,\n            });\n        } else {\n            // \u5173\u95EDrootModal\u5F39\u7A97\u540E\uFF0C\u5EF6\u65F6\u6E05\u7A7A\u8DEF\u7531\n            setTimeout(() => {\n                setCustomRouter({\n                    path: '/',\n                    history: [],\n                });\n            }, 100);\n            document.body.classList.remove('particle-modal-lock');\n        }\n    }, [authCoreModal.particleModalVisible, authCoreModal.rootModalContainer]);\n\n    const bodySze = useSize(isServer() ? null : document.body);\n\n    useEffect(() => {\n        // \u8BBE\u7F6EviewType \u4E3A\u5168\u5C40\u53D8\u91CF desktop | mobile\n        let viewType: ViewType = 'mobile';\n        if (document.body.clientWidth >= 600) {\n            viewType = 'desktop';\n        }\n        setAuthCoreModal({\n            viewType,\n        });\n    }, [bodySze]);\n\n    useEffect(() => {\n        if (customRouter?.path && customRouter?.path != '/') {\n            // \u8DEF\u7531 path \u4E0D\u4E3A / \u65F6\uFF0C\u6253\u5F00rootModal\u5F39\u7A97\n            setAuthCoreModal({\n                particleModalVisible: true,\n            });\n        }\n    }, [customRouter?.path]);\n\n    useEffect(() => {\n        // \u8BBE\u7F6E\u6A21\u6001\u6846\u7684\u5BBD\u5EA6\u548C\u9AD8\u5EA6\uFF0C\u54CD\u5E94\u79FB\u52A8\u7AEF\u89C6\u56FE\n        if (rootRef.current) {\n            const minWidth = 300;\n            const minHeight = 500;\n            let modalWidth = Math.max(minWidth, Number(modalOptions.customStyle?.modalWidth));\n            let modalHeight = Math.max(minHeight, Number(modalOptions.customStyle?.modalHeight));\n\n            if (authCoreModal.viewType == 'mobile') {\n                modalWidth = document.body.clientWidth;\n                modalHeight = document.body.clientHeight * 0.86;\n            }\n            const vm = modalWidth / 100;\n            rootRef.current.style.setProperty('--vw', vm + 'px');\n            rootRef.current.style.setProperty('--doc-height', modalHeight + 'px');\n            rootRef.current.style.setProperty('--doc-width', modalWidth + 'px');\n        }\n    }, [\n        rootRef.current,\n        authCoreModal.viewType,\n        modalOptions.customStyle?.modalWidth,\n        modalOptions.customStyle?.modalHeight,\n    ]);\n\n    useEffect(() => {\n        setTimeout(() => {\n            i18n.changeLanguage(modalOptions.language || 'en');\n        });\n    }, [modalOptions.language]);\n\n    useEffect(() => {\n        const onMasterPasswordChange = () => {\n            customNavigate(AuthPage.MasterPasswordVerify);\n        };\n        window?.particleAuth?.on(AuthCoreEvent.MasterPasswordChanged, onMasterPasswordChange);\n        return () => {\n            window?.particleAuth?.off(AuthCoreEvent.MasterPasswordChanged, onMasterPasswordChange);\n        };\n    }, [customRouter.history, customNavigate]);\n\n    useEffect(() => {\n        i18nInit(modalOptions.language || 'en');\n\n        const userInfoChanged = (userInfo: UserInfo) => {\n            setUserInfo(userInfo);\n        };\n        const onDisconnect = (error?: Error) => {\n            setUserInfo(undefined);\n            if (events.listenerCount(AuthCoreModalEvent.SignResponse) > 0) {\n                // \u5982\u679C\u6709\u76D1\u542CsignResponse\u4E8B\u4EF6\uFF0C\u8BF4\u660E\u662F\u5728\u7B7E\u540D\u4E2D\u65AD\uFF0C\u9700\u8981\u89E6\u53D1signResponse\u4E8B\u4EF6\n                events.emit(AuthCoreModalEvent.SignResponse, {\n                    error: error || AuthError.notLogin(),\n                });\n            }\n            setAuthCoreModal({\n                particleModalVisible: false,\n            });\n        };\n\n        window?.particleAuth?.on(AuthCoreEvent.UserInfoChanged, userInfoChanged);\n        window?.particleAuth?.on(AuthCoreEvent.ParticleAuthDisconnect, onDisconnect);\n        return () => {\n            window?.particleAuth?.off(AuthCoreEvent.UserInfoChanged, userInfoChanged);\n            window?.particleAuth?.off(AuthCoreEvent.ParticleAuthDisconnect, onDisconnect);\n        };\n    }, []);\n\n    if (!initParticleAuthRef.current) {\n        // authCore \u521D\u59CB\u5316\n        particleAuth.init({\n            projectId: modalOptions.projectId || props.options.projectId,\n            clientKey: modalOptions.clientKey || props.options.clientKey,\n            appId: modalOptions.appId || props.options.appId,\n        });\n        const info = getUserInfo();\n        setUserInfo(info);\n        initParticleAuthRef.current = true;\n\n        if (info) {\n            const { token = '', ...restInfo } = info;\n            sendAnalyticsActive('open', restInfo);\n        }\n    }\n\n    useEffect(() => {\n        if (isConnected()) {\n            syncUserInfo().catch((e) => console.error('syncUserInfo', e));\n        }\n        loadStyles();\n    }, []);\n\n    if (!isServer()) {\n        // @ts-ignore\n        window.__getConnectCaptcha = getConnectCaptcha;\n        // @ts-ignore\n        window.__connect = connect;\n        // @ts-ignore\n        window.__getUserInfo = getUserInfo;\n        // @ts-ignore\n        window.__getPageHTML = getPageHTML;\n        // @ts-ignore\n        window.__navigate = customNavigate;\n    }\n\n    useEffect(() => {\n        console.log('\uD83D\uDE80 ~ AuthCoreContextProvider ~ connectionStatus:', connectionStatus);\n    }, [connectionStatus]);\n\n    const [socialConnectCallback, setSocialConnectCallback] = useState<SocialConnectCallback>();\n\n    return (\n        <GlobalContext.Provider\n            value={{\n                connectionStatus,\n                setConnectionStatus,\n                userInfo,\n                modalOptions,\n                setModalOptions,\n                showSelectSecurityAccount,\n                setWrongPassword,\n                setPaymentVerify,\n                showAccountTipModal,\n                setPaymentPassword,\n                loginSuccessRedirectToApp,\n                events,\n                authCoreModal,\n                setAuthCoreModal,\n                customRouter,\n                setCustomRouter,\n                customNavigate,\n                setLoginAuthorization,\n                authCoreModalClose,\n                socialConnectCallback,\n                setSocialConnectCallback,\n            }}\n        >\n            {props.children}\n\n            {isServer() ? (\n                <div></div>\n            ) : (\n                <root.div mode=\"closed\" id=\"particle-auth-core-root\">\n                    <div\n                        id=\"particle-auth-core-modal\"\n                        className={`particle-auth-core-shadow-root ${modalOptions.themeType}`}\n                        data-path={customRouter?.path}\n                        data-auth-core-modal-version={getVersion()}\n                        data-auth-core-version={particleAuth.version}\n                        ref={rootRef}\n                        onClick={(event) => {\n                            event.stopPropagation();\n                        }}\n                    >\n                        <style data-name=\"fontStyle\">{fontStyle}</style>\n                        {!!styles.styleList[0].styleContent &&\n                            styles.styleList.map((item: any, index: number) => {\n                                return (\n                                    <style data-name={item.name} data-index={index} key={index}>\n                                        {item.styleContent}\n                                    </style>\n                                );\n                            })}\n                        <style data-name=\"customTheme\">{customThemeStyle as unknown as string}</style>\n\n                        {authCoreModal.rootModalContainer && (\n                            <ParticleModal\n                                visible={authCoreModal.particleModalVisible}\n                                closable={authCoreModal.closable}\n                                onClose={() => {\n                                    authCoreModalClose();\n                                }}\n                                className=\"root-particle-modal-container\"\n                                modalProps={{\n                                    footer: null,\n                                    width: parseInt(modalOptions.customStyle?.modalWidth as unknown as string),\n                                    height: parseInt(modalOptions.customStyle?.modalHeight as unknown as string),\n                                    forceRender: true,\n                                    destroyOnClose: true,\n                                    style: {\n                                        maxWidth: modalOptions.customStyle?.modalWidth,\n                                    },\n                                    zIndex: modalOptions.customStyle?.zIndex || 99999,\n                                }}\n                                drawerProps={{\n                                    height: '86%',\n                                    closable: false,\n                                    forceRender: true,\n                                    destroyOnClose: true,\n                                    push: false,\n                                    zIndex: modalOptions.customStyle?.zIndex || 99999,\n                                }}\n                            >\n                                <CustomRouter\n                                    path={customRouter?.path}\n                                    state={customRouter?.state}\n                                    replace={customRouter?.replace}\n                                    children={customRouter?.children}\n                                />\n                            </ParticleModal>\n                        )}\n\n                        <React.Suspense>\n                            <IframeWalletPlugin />\n                            <SelectSecurityAccount visible={selectSecurityAccount} state={verifySecurityAccountState} />\n                            <AccountTipModal modal={accountTipModal} />\n                            <PaymentVerifyModal props={paymentVerify} />\n                            <WrongPasswordModal info={wrongPassword} />\n                        </React.Suspense>\n                        <AuthCoreModalContainer data-ref=\"rootModalContainer\" setAuthCoreModal={setAuthCoreModal} />\n                        {props.options.web3Modal && <Web3ModalProvider web3Modal={props.options.web3Modal} />}\n                    </div>\n                </root.div>\n            )}\n        </GlobalContext.Provider>\n    );\n};\n\nexport const useAuthCoreModal = () => {\n    const { authCoreModal, setAuthCoreModal, authCoreModalClose } = useContext(GlobalContext);\n    return {\n        authCoreModalClose,\n        authCoreModal,\n        setAuthCoreModal,\n    };\n};\n\nexport const useCustomRouter = () => {\n    const { customRouter, setCustomRouter } = useContext(GlobalContext);\n    return {\n        customRouter,\n        setCustomRouter,\n    };\n};\n\nexport const useCustomNavigate = () => {\n    const { customNavigate } = useContext(GlobalContext);\n\n    return customNavigate;\n};\n\nexport const useParticleAuth = () => {\n    const context = useContext(GlobalContext);\n    if (!context.modalOptions) {\n        throw new Error('Auth Core hooks must used in AuthCoreContextProvider');\n    }\n    return context;\n};\n\nexport const useModalOptions = () => {\n    const { modalOptions, setModalOptions } = useContext(GlobalContext);\n    return {\n        modalOptions,\n        setModalOptions,\n    };\n};\n\nexport const useEvents = () => {\n    const { events } = useContext(GlobalContext);\n    return { events };\n};\n", "import { isConnected } from '@particle-network/auth-core';\nimport qs from 'qs';\nimport React, { useMemo } from 'react';\nimport type { ICustomRouter } from '../../context/types';\nimport ParticleLoading from '../loading';\n\nexport enum AuthPage {\n    Index = 'index',\n    Login = 'login',\n    EvmSign = 'evm-chain/sign',\n    SolanaSign = 'solana/sign',\n    LoginAccount = 'login-account',\n    AccountSecurity = 'account/security',\n    MasterPasswordVerify = 'account/master-password/verify',\n    MasterPasswordPrompt = 'account/master-password/prompt',\n}\n\ninterface IPage {\n    name?: AuthPage;\n    path?: string;\n    component: React.LazyExoticComponent<any>;\n}\n\nconst pages: IPage[] = [\n    {\n        name: AuthPage.Index,\n        component: React.lazy(() => import('../../pages/index/index')),\n    },\n    {\n        name: AuthPage.Login,\n        component: React.lazy(() => import('../../pages/login')),\n    },\n    {\n        path: 'account/security',\n        component: React.lazy(() => import('../../pages/account/security')),\n    },\n    {\n        name: AuthPage.LoginAccount,\n        path: 'login-account',\n        component: React.lazy(() => import('../../pages/loginAccount/index')),\n    },\n    {\n        path: 'manageDevices/deviceList',\n        component: React.lazy(() => import('../../pages/manageDevices/deviceList/index')),\n    },\n    {\n        path: 'manageDevices/deviceDetails',\n        component: React.lazy(() => import('../../pages/manageDevices/deviceDetails/index')),\n    },\n    {\n        name: AuthPage.EvmSign,\n        component: React.lazy(() => import('../../pages/sign/index')),\n    },\n    {\n        name: AuthPage.SolanaSign,\n        component: React.lazy(() => import('../../pages/sign/components/info-sign')),\n    },\n    {\n        path: 'account/bind',\n        component: React.lazy(() => import('../../pages/account/accountBind/index')),\n    },\n    {\n        path: 'account/verify',\n        component: React.lazy(() => import('../../pages/account/accountVerify/index')),\n    },\n    {\n        path: 'login-account',\n        component: React.lazy(() => import('../../pages/loginAccount/index')),\n    },\n    {\n        path: 'manageDevices/deviceDetails',\n        component: React.lazy(() => import('../../pages/manageDevices/deviceDetails/index')),\n    },\n    {\n        path: 'account/master-password',\n        component: React.lazy(() => import('../../pages/account/setMasterPassword/index')),\n    },\n    {\n        path: 'account/master-password/description',\n        component: React.lazy(() => import('../../pages/account/masterPasswordDescription/index')),\n    },\n    {\n        path: AuthPage.MasterPasswordVerify,\n        component: React.lazy(() => import('../../pages/account/masterPasswordVerify/index')),\n    },\n    {\n        path: AuthPage.MasterPasswordPrompt,\n        component: React.lazy(() => import('../../pages/account/masterPasswordModal/index')),\n    },\n    {\n        path: 'account/master-password/change',\n        component: React.lazy(() => import('../../pages/account/masterPasswordChange/index')),\n    },\n    {\n        path: 'account/set-password',\n        component: React.lazy(() => import('../../pages/account/setPaymentPassword/index')),\n    },\n    {\n        path: 'account/change-password',\n        component: React.lazy(() => import('../../pages/account/changePaymentPassword/index')),\n    },\n    {\n        path: 'login-account/bind',\n        component: React.lazy(() => import('../../pages/loginAccountBind/index')),\n    },\n    {\n        path: 'login-account/bind-loading',\n        component: React.lazy(() => import('../../pages/account/loginAccountBindLoading/index')),\n    },\n];\n\nconst CustomRouter = (props: ICustomRouter) => {\n    const path = useMemo(() => {\n        let path = props.path?.split('?')?.[0].replace(/^\\//, '');\n        if (path == '' || path == '/') {\n            path = AuthPage.Index;\n        }\n        if (path !== AuthPage.Login && !isConnected() && path !== AuthPage.Index) {\n            path = AuthPage.Login;\n        }\n        return path;\n    }, [props.path]);\n\n    const queryString = useMemo(() => {\n        let queryString = props.path?.split('?')?.[1];\n        if (path !== AuthPage.Login && !isConnected() && path !== AuthPage.Index) {\n            queryString = '';\n        }\n        return queryString;\n    }, [props.path, path]);\n\n    const state = useMemo(() => {\n        return {\n            ...(props.state || {}),\n            ...qs.parse(queryString),\n        };\n    }, [props.state, queryString]);\n\n    const Comp = useMemo(() => {\n        let Comp = pages.find((item: IPage) => item.name === path || item.path === path);\n        if (!Comp) {\n            if (path) {\n                console.log('Not Found', path);\n            }\n            Comp = pages[0];\n        }\n        return Comp;\n    }, [path]);\n\n    return (\n        <div data-path={path} data-state={qs.stringify(state)} key={path}>\n            <React.Suspense\n                fallback={\n                    <div className=\"lazy-loaing-container\">\n                        <ParticleLoading />\n                    </div>\n                }\n            >\n                <Comp.component {...state} children={props.children} />\n            </React.Suspense>\n        </div>\n    );\n};\n\nexport default CustomRouter;\n", "import React from 'react';\nimport styles from './index.less';\n\nconst ParticleLoading = () => {\n    return (\n        <>\n            <style>{styles as unknown as string}</style>\n            <div className=\"loading-content\">\n                <div className=\"lds-default\">\n                    <div></div>\n                    <div></div>\n                    <div></div>\n                    <div></div>\n                    <div></div>\n                    <div></div>\n                    <div></div>\n                    <div></div>\n                    <div></div>\n                    <div></div>\n                    <div></div>\n                    <div></div>\n                </div>\n                <div className=\"power-text\">Powered by</div>\n                <div className=\"logo-text\">Particle Network</div>\n            </div>\n        </>\n    );\n};\n\nexport default ParticleLoading;\n", "import { Modal } from 'antd';\nimport React, { forwardRef, useEffect, useImperativeHandle, useState } from 'react';\n\nimport { useAuthCoreModal } from '../../context';\nimport ParticleDrawer from '../particle-drawer';\nimport styles from './index.less';\n\ninterface IProps {\n    children?: React.ReactNode;\n    visible?: boolean;\n    containerSelector?: any;\n    title?: string | any;\n    modalProps?: any;\n    locked?: 'modal' | 'drawer';\n    drawerProps?: any;\n    className?: string;\n    closable?: boolean;\n    onOpen?: () => void;\n    onClose?: () => void;\n}\nconst ParticleModal = forwardRef((props: IProps, ref) => {\n    const { children, title, drawerProps = {}, modalProps = {} } = props;\n    const { authCoreModal } = useAuthCoreModal();\n    const [visible, setVisible] = useState(props.visible || false);\n\n    const onClose = () => {\n        setVisible(false);\n        props.onClose && props.onClose();\n    };\n\n    const onOpen = () => {\n        setVisible(true);\n        props.onOpen && props.onOpen();\n    };\n\n    useImperativeHandle(ref, () => ({\n        setVisible,\n        onOpen,\n        onClose,\n    }));\n\n    useEffect(() => {\n        setVisible(props.visible ?? false);\n    }, [props.visible]);\n\n    if (modalProps?.style?.top) {\n        modalProps.style.top = '';\n    }\n\n    return (\n        <>\n            <style>{styles as unknown as string}</style>\n            {authCoreModal.viewType == 'desktop' || props.locked === 'modal' ? (\n                <Modal\n                    title={title}\n                    open={visible}\n                    okText=\"\"\n                    wrapClassName={`w-model-container ${props.className || ''}`}\n                    centered={true}\n                    maskClosable={false}\n                    getContainer={() => {\n                        return props.containerSelector\n                            ? document.querySelector(props.containerSelector)\n                            : authCoreModal.rootModalContainer || document.querySelector('body');\n                    }}\n                    onCancel={() => {\n                        onClose();\n                    }}\n                    closable={props.closable ?? true}\n                    // closeIcon={<MIcon name=\"icon_63\" size={30} />}\n                    {...modalProps}\n                    styles={{\n                        ...modalProps.styles,\n                    }}\n                >\n                    {children}\n                </Modal>\n            ) : (\n                <ParticleDrawer\n                    className={`w-drawer-container ${props.className || ''}`}\n                    closable={props.closable ?? true}\n                    onClose={onClose}\n                    visible={visible}\n                    placement=\"bottom\"\n                    getContainer={() => {\n                        return props.containerSelector\n                            ? document.querySelector(props.containerSelector)\n                            : authCoreModal.rootModalContainer || document.querySelector('body');\n                    }}\n                    extra={<>{/* <MIcon name=\"icon_63\" size={30} onClick={() => onClose()} /> */}</>}\n                    title={title}\n                    {...drawerProps}\n                >\n                    {children}\n                </ParticleDrawer>\n            )}\n        </>\n    );\n});\n\nexport default ParticleModal;\n", "import { Drawer } from 'antd';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { useAuthCoreModal } from '../../context';\nimport { isMobile } from '../../utils';\nimport CircleClose from '../icon/circle-close';\nimport styles from './index.less';\n\ninterface IProps {\n    children?: React.ReactNode;\n    onClose: () => void;\n    visible: boolean;\n    title?: string;\n    [key: string]: any;\n}\nconst ParticleDrawer = (props: IProps) => {\n    const { title, children, onClose, visible, ...rest } = props;\n    const [mobile, setMobile] = useState<boolean>(isMobile());\n    const { authCoreModal } = useAuthCoreModal();\n    const dropDownRef = useRef({\n        isDown: false,\n        moveY: 0,\n    });\n    const drawerContentRef = useRef<HTMLDivElement>(null);\n\n    const className = useMemo(() => {\n        const classNames = [\n            props.className,\n            `particle-${mobile ? 'mobile' : 'pc'}-drawer`,\n            'particle-drawer-container',\n        ];\n        return classNames.join(' ');\n    }, [props.className, mobile]);\n\n    const isScroll = (target: HTMLElement) => {\n        let parentElement: HTMLElement | null = target;\n        let flag = false;\n        while (parentElement) {\n            parentElement = parentElement.parentElement;\n            if (parentElement?.classList.contains('ant-drawer-body')) {\n                break;\n            }\n            if (parentElement?.scrollTop) {\n                flag = true;\n                break;\n            }\n        }\n        return flag;\n    };\n\n    const drawerContainer = useMemo(() => {\n        return props.containerSelector\n            ? document.querySelector(props.containerSelector)\n            : authCoreModal.rootModalContainer || document.querySelector('body');\n    }, [props.containerSelector, authCoreModal.rootModalContainer]);\n\n    useEffect(() => {\n        if (!mobile || !drawerContentRef?.current) {\n            return;\n        }\n        const touchstartHandler = (e: TouchEvent) => {\n            if (e.type === 'touchstart' && isScroll(e.target as HTMLElement)) {\n                return;\n            }\n            const clientY = e.touches[0].clientY;\n            e.stopPropagation();\n            dropDownRef.current.isDown = true;\n            dropDownRef.current.moveY = clientY;\n        };\n\n        if (visible) {\n            drawerContentRef?.current?.addEventListener('touchstart', touchstartHandler);\n        }\n\n        if (!visible) {\n            drawerContentRef?.current?.removeEventListener('touchstart', touchstartHandler);\n            dropDownRef.current.isDown = false;\n            dropDownRef.current.moveY = 0;\n        }\n\n        return () => {\n            drawerContentRef?.current?.removeEventListener('touchstart', touchstartHandler);\n            dropDownRef.current.isDown = false;\n            dropDownRef.current.moveY = 0;\n        };\n    }, [visible, mobile, drawerContentRef?.current]);\n\n    useEffect(() => {\n        if (!mobile || !drawerContentRef?.current) {\n            return;\n        }\n        const touchendHandler = (e: TouchEvent) => {\n            if (dropDownRef.current.isDown) {\n                e.stopPropagation();\n                dropDownRef.current.isDown = false;\n            }\n        };\n\n        const touchmoveHandler = (e: TouchEvent) => {\n            e.preventDefault();\n            const clientY = e.touches[0].clientY;\n            if (dropDownRef.current.isDown && clientY - dropDownRef.current.moveY > 60) {\n                onClose();\n            }\n        };\n\n        drawerContentRef?.current?.addEventListener('touchend', touchendHandler);\n\n        drawerContentRef?.current?.addEventListener('touchmove', touchmoveHandler, { passive: true });\n\n        return () => {\n            drawerContentRef?.current?.removeEventListener('touchend', touchendHandler);\n            drawerContentRef?.current?.removeEventListener('touchmove', touchmoveHandler);\n        };\n    }, [mobile, drawerContentRef?.current]);\n\n    useEffect(() => {\n        const resizeHandler = () => {\n            setMobile(isMobile());\n        };\n        window.addEventListener('resize', resizeHandler);\n        return () => {\n            window.removeEventListener('resize', resizeHandler);\n        };\n    }, []);\n\n    return (\n        <Drawer\n            onClose={onClose}\n            open={visible}\n            {...rest}\n            className={className}\n            destroyOnClose={false}\n            getContainer={() => {\n                return rest?.getContainer?.() || drawerContainer;\n            }}\n        >\n            <div className=\"particle-drawer-content\" ref={drawerContentRef}>\n                <style>{styles as unknown as string}</style>\n                <CircleClose\n                    data-mobile={mobile}\n                    className=\"close-icon\"\n                    onClick={() => {\n                        onClose();\n                    }}\n                />\n                <div className=\"particle-close-btn\" data-mobile={mobile}></div>\n                {title && <div className=\"particle-title\">{title}</div>}\n                {children}\n            </div>\n        </Drawer>\n    );\n};\n\nexport default ParticleDrawer;\n", "import Icon from '@ant-design/icons';\nimport React from 'react';\nimport styles from './index.less';\n\nconst CircleClose = ({ className = '', ...others }) => {\n    const svg = require('../../common/icon/circle_close.svg').default;\n    return (\n        <>\n            <style>{styles as unknown as string}</style>\n            <Icon\n                className={className ? `circle-close-icon ${className}` : 'circle-close-icon'}\n                //@ts-ignore\n                component={svg}\n                {...others}\n            />\n        </>\n    );\n};\n\nexport default CircleClose;\n", "import React, { useEffect, useRef } from 'react';\n\nconst AuthCoreModalContainer = ({ setAuthCoreModal }: any) => {\n    const rootModalContainerRef = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        setAuthCoreModal({\n            rootModalContainer: rootModalContainerRef.current,\n        });\n    }, [setAuthCoreModal]);\n\n    return <div ref={rootModalContainerRef}></div>;\n};\n\nexport default AuthCoreModalContainer;\n", "import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport resources from './locales/resources';\n\nexport const i18nInit = (lng = 'en') => {\n    i18n.use(initReactI18next).init({\n        fallbackLng: 'en',\n        resources,\n        lng: lng ? lng.replace('_', '-') : undefined,\n        interpolation: {\n            escapeValue: false,\n        },\n    });\n};\nexport default i18n;\n", "import en from './en.json';\nimport jp from './jp.json';\nimport kr from './kr.json';\nimport tc from './tc.json';\nimport zh from './zh.json';\n\nconst resources = {\n    en: {\n        translation: en,\n    },\n    'zh-CN': {\n        translation: zh,\n    },\n    'zh-TW': {\n        translation: tc,\n    },\n    'zh-HK': {\n        translation: tc,\n    },\n    ja: {\n        translation: jp,\n    },\n    ko: {\n        translation: kr,\n    },\n};\nexport default resources;\n", "import {\n    getLatestAuthType,\n    getUserInfo,\n    isNullish,\n    requireNotNullish,\n    type ERC4337Options,\n    type LoginAuthorization,\n    type SolanaAuthorization,\n} from '@particle-network/auth-core';\nimport type { Chain } from '@particle-network/chains';\nimport base58 from 'bs58';\nimport { v4 as uuidv4 } from 'uuid';\nimport { getEVMPublicAddress } from '../api/getPublicAddress';\nimport { isSolana } from './chain-utils';\nimport { shortString, toHexPrefixString } from './common-utils';\n\nexport type AuthorizationResult = {\n    message: string;\n    signature: string;\n};\n\n//https://eips.ethereum.org/EIPS/eip-4361\nconst signInEthereumMessage = `{0} wants you to sign in with your Ethereum account:\n{1}\n\n{2}\n\nURI: https://{3}/\nVersion: 1\nChain ID: {4}\nNonce: {5}\nIssued At: {6}\nExpiration Time: {7}`;\n\nconst authorizeUtils = {\n    isNeedAuthorize({ authorization, chain }: LoginAuthorization): boolean {\n        if (!authorization) {\n            return false;\n        }\n        if (chain.name.toLowerCase() === 'solana') {\n            return (\n                'message' in authorization &&\n                !isNullish(authorization.message) &&\n                'uniq' in authorization &&\n                !isNullish(authorization.uniq)\n            );\n        } else {\n            return 'uniq' in authorization && !isNullish(authorization.uniq);\n        }\n    },\n\n    async generateMessage(chain: Chain, erc4337?: ERC4337Options): Promise<string> {\n        const domain = location.host;\n        const userInfo = getUserInfo() as any;\n        const address = isSolana(chain)\n            ? window.particleAuth?.solana.selectedAddress\n            : await getEVMPublicAddress({\n                  ...erc4337,\n                  chainId: chain.id,\n              });\n        const authType = getLatestAuthType() || 'email';\n        const account = userInfo[authType] || userInfo[`${authType}_email`] || shortString(userInfo[`${authType}_id`]);\n        const statement = `${authType.titleCase()}: ${account}`;\n        const nonce = uuidv4().replace(/-/g, '');\n        const issuedAt = new Date().toISOString();\n        // 15\u5206\u949F\u6709\u6548\u671F\n        const expirationTime = new Date(Date.now() + 10 * 60 * 1000).toISOString();\n        return signInEthereumMessage.format(\n            domain,\n            address || '',\n            statement,\n            domain,\n            chain.id.toString(),\n            nonce,\n            issuedAt,\n            expirationTime\n        );\n    },\n\n    async authorize(\n        { authorization, chain }: LoginAuthorization,\n        erc4337?: ERC4337Options\n    ): Promise<AuthorizationResult> {\n        const message = isSolana(chain)\n            ? (authorization as SolanaAuthorization).message\n            : toHexPrefixString(await this.generateMessage(chain, erc4337));\n        const particleAuth = requireNotNullish(window.particleAuth);\n        let signature;\n        if (isSolana(chain)) {\n            const result = await particleAuth.solana.signMessage(base58.decode(message));\n            signature = Buffer.from(result).toString('base64');\n        } else {\n            signature = await particleAuth.ethereum.signMessage(message);\n        }\n        return {\n            message,\n            signature,\n        };\n    },\n};\n\nexport default authorizeUtils;\n", "import { getSmartAccountAddress, tronAddressFromHex, type ERC4337Options } from '@particle-network/auth-core';\nimport { chains } from '@particle-network/chains';\nimport { isTron } from '../utils/chain-utils';\n\ntype Options = {\n    chainId?: number;\n    erc4337?: ERC4337Options;\n};\n\nexport const getEVMPublicAddress = async ({ chainId, erc4337 }: Options): Promise<string> => {\n    const id = chainId || Number(window.particleAuth?.ethereum.chainId);\n    let address;\n    if (erc4337) {\n        address = await getSmartAccountAddress(erc4337);\n    } else {\n        if (typeof window !== 'undefined') {\n            address = window.particleAuth?.ethereum.selectedAddress;\n        }\n    }\n\n    if (isTron(chains.getEVMChainInfoById(id))) {\n        address = tronAddressFromHex(address);\n    }\n    return address || '';\n};\n", "import { isHexString } from '@ethereumjs/util';\nimport { tronAddressFromHex } from '@particle-network/auth-core';\nimport { Ethereum, chains, type Chain, type ChainInfo } from '@particle-network/chains';\n\nexport const getChainDisplayName = (chain: Chain) => {\n    const chainInfo = getChainInfo(chain);\n    if (!chainInfo) {\n        return '';\n    }\n    if (chainInfo.network === 'Mainnet') {\n        return chainInfo.fullname.replace(' Mainnet', '');\n    } else {\n        return chainInfo.fullname;\n    }\n};\n\nexport function getNativeSymbol(chain: Chain): string {\n    return getChainInfo(chain)?.nativeCurrency?.symbol || '';\n}\n\nexport function getChainIcon(chain: Chain): string {\n    return formatPng(getChainInfo(chain)?.icon ?? defaultTokenIcon);\n}\n\nexport function getChainInfo(chain: Chain): ChainInfo | undefined {\n    return chains.getChainInfo(chain);\n}\n\nexport function getEvmChain(id: number) {\n    return chains.getEVMChainInfoById(id);\n}\n\nexport function getSolanaChain(id: number) {\n    return chains.getSolanaChainInfoById(id);\n}\n\nexport function formatAddress(address: string, chain: Chain): string {\n    if (isTron(chain) && isHexString(address)) {\n        return tronAddressFromHex(address);\n    }\n    return address;\n}\n\nexport const defaultTokenIcon = 'https://static.particle.network/token-list/defaultToken/default.png';\n\nexport function isSolana(chain: Chain) {\n    return chain.name.toLowerCase() === 'solana';\n}\n\nexport function isEvm(chain: Chain) {\n    return chain.name.toLowerCase() !== 'solana';\n}\n\nexport function isTron(chain?: Chain) {\n    return chain && chain.name.toLowerCase() === 'tron';\n}\n\nexport const formatPng = (src = '') => {\n    if (!src) return src;\n    return src + (src.includes('?') ? '&' : '?') + 'x-oss-process=image/format,png';\n};\n\nexport function getNativeTokenIcon(chain?: Chain): string {\n    if (chain) {\n        const chainInfo = getChainInfo(chain);\n        if (chainInfo) {\n            if (chainInfo.nativeCurrency.symbol === 'ETH') {\n                return Ethereum.icon;\n            } else {\n                return chainInfo?.nativeIcon || chainInfo?.icon || defaultTokenIcon;\n            }\n        } else {\n            return defaultTokenIcon;\n        }\n    }\n    return defaultTokenIcon;\n}\n", "import type { PrefixedHexString, ToBufferInputTypes } from '@ethereumjs/util';\nimport { bufferToHex, isHexString, toBuffer } from '@ethereumjs/util';\nimport { AuthType } from '@particle-network/auth-core';\nimport type BN from 'bn.js';\nimport { isValidPhoneNumber, parsePhoneNumber } from 'libphonenumber-js/max';\n\nexport function shortString(str: any): string {\n    if (Array.isArray(str)) {\n        str = '[' + str.toString() + ']';\n    }\n    if (str) {\n        if (typeof str.toString === 'function') {\n            str = str.toString();\n        }\n        if (str.length <= 10) {\n            return str;\n        }\n        return `${str.slice(0, 5)}...${str.slice(str.length - 5, str.length)}`;\n    }\n    return '';\n}\n\nexport const displayEmail = (email: string): string => {\n    if (!email) {\n        return '';\n    }\n    const parts = email.split('@');\n    if (parts[0].length <= 3) {\n        return `${parts[0]}****@${parts[1]}`;\n    } else {\n        return `${parts[0].slice(0, 3)}****@${parts[1]}`;\n    }\n};\n\nexport const displayPhone = (phone: string) => {\n    if (!phone) {\n        return '';\n    }\n    if (isValidPhoneNumber(phone)) {\n        const phoneNumber = parsePhoneNumber(phone);\n        const countryCode = phoneNumber.countryCallingCode;\n        const code = phoneNumber.nationalNumber.toString();\n\n        if (code && countryCode) {\n            const count = code.length >= 6 ? 3 : Math.floor(code.length / 2);\n            return `+${countryCode} ${code.slice(0, count)}****${code.slice(-count)}`;\n        }\n    }\n    return phone;\n};\n\ndeclare global {\n    interface String {\n        format(...params: string[]): string;\n        titleCase(): string;\n    }\n}\n\n/*eslint no-extend-native: [\"error\", { \"exceptions\": [\"String\"] }]*/\nString.prototype.format = function (...params: string[]): string {\n    const args = params;\n    return this.replace(/{(\\d+)}/g, function (match, number) {\n        return typeof args[number] != 'undefined' ? args[number] : match;\n    });\n};\n\nString.prototype.titleCase = function (): string {\n    if (this.length === 0) {\n        return '';\n    } else if (this.length === 1) {\n        return this.toUpperCase();\n    }\n\n    return this.slice(0, 1).toUpperCase() + this.slice(1);\n};\n\nexport function assert(condition: any, message?: any) {\n    if (!condition) {\n        throw new Error(message || 'Assertion failed');\n    }\n}\n\nexport function isSocialLogin(type: string): boolean {\n    return type !== AuthType.phone && type !== AuthType.email && type !== AuthType.jwt;\n}\n\n/**\n * Returns `true` if the given value is nullish.\n *\n * @param value - The value being checked.\n * @returns Whether the value is nullish.\n */\nexport function isNullish(value: any) {\n    return value === null || value === undefined;\n}\n\n/**\n * Convert a value to a Buffer.\n *\n * @param value - The value to convert to a Buffer.\n * @returns The given value as a Buffer.\n */\nexport function legacyToBuffer(value: ToBufferInputTypes) {\n    return typeof value === 'string' && !isHexString(value) ? Buffer.from(value) : toBuffer(value);\n}\n\nexport function toHexPrefixString(value: ToBufferInputTypes): PrefixedHexString {\n    if (typeof value === 'string' && isHexString(value)) {\n        return value;\n    } else {\n        return bufferToHex(legacyToBuffer(value));\n    }\n}\n\n/**\n * Convert BN to 0x-prefixed hex string.\n */\nexport function bnToHex(value: BN): PrefixedHexString {\n    return `0x${value.toString(16)}`;\n}\n\nexport function popupwindow(url: string, title: string, w: number, h: number): Window | null {\n    const left = screen.width / 2 - w / 2;\n    const top = screen.height / 2 - h / 2;\n    return window.open(\n        url,\n        title,\n        'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=' +\n            w +\n            ', height=' +\n            h +\n            ', top=' +\n            top +\n            ', left=' +\n            left\n    );\n}\n\nexport function popupwindowNoLimit(url: string, title: string, w: number, h: number): Window | null {\n    const left = screen.width / 2 - w / 2;\n    const top = screen.height / 2 - h / 2;\n    return window.open(url, title, 'width=' + w + ', height=' + h + ', top=' + top + ', left=' + left);\n}\n\nexport function isInIframe(): boolean {\n    return window.location !== window.parent.location;\n}\n\n/**\n * \u7A97\u53E3\u4FE1\u606F\u4F20\u9012\n */\nexport function authPostMessage(key: string, data: any) {\n    data = {\n        ...data,\n        name: key,\n        _: Date.now(),\n    };\n    try {\n        window.parent.postMessage(data, '*');\n    } catch (error) {\n        // pass\n    }\n    try {\n        window.opener.postMessage(data, '*');\n    } catch (error) {\n        // pass\n    }\n    try {\n        window.opener.parent.postMessage(data, '*');\n    } catch (error) {\n        // pass\n    }\n    sessionStorage.setItem(key, JSON.stringify(data));\n    localStorage.setItem(key, JSON.stringify(data));\n}\n\n/**\n * \u53E3\u4FE1\u606F\u63A5\u6536\n * @param key\n * @param cb\n * @returns\n */\nexport function authReceiveMessage(key: string, cb: any) {\n    const messageHandler = (event: any) => {\n        if (event instanceof MessageEvent || event instanceof StorageEvent) {\n            let data;\n            if (event instanceof MessageEvent) {\n                data = event.data;\n            } else {\n                // @ts-ignore\n                data = JSON.parse(event.newValue);\n            }\n\n            if (data?.name === key) {\n                const newData = {\n                    ...data,\n                    messageType: event instanceof MessageEvent ? 'message' : 'storage',\n                };\n                cb(newData);\n            }\n        }\n    };\n\n    window.addEventListener('message', messageHandler);\n    window.addEventListener('storage', messageHandler);\n\n    return {\n        destroyMessage() {\n            window.removeEventListener('message', messageHandler);\n            window.removeEventListener('storage', messageHandler);\n        },\n    };\n}\n", "import { analyticsActive, getUserInfo, type UserInfo } from '@particle-network/auth-core';\nimport { isClient } from '.';\n\nexport const sendAnalyticsActive = (\n    action: 'sign' | 'login' | 'open' | 'open_wallet',\n    userInfo?: Omit<UserInfo, 'token'>\n) => {\n    const info = userInfo ?? getUserInfo();\n    if (info && isClient()) {\n        let wallet = info.wallets.find((item) => item.chain_name !== 'solana');\n        if (!wallet?.public_address) {\n            wallet = info.wallets.find((item) => item.chain_name === 'solana');\n        }\n        if (wallet && wallet.public_address) {\n            /* eslint-disable */\n            analyticsActive({\n                chain_id:\n                    wallet.chain_name !== 'solana'\n                        ? Number(window.particleAuth?.ethereum.chainId)\n                        : window.particleAuth?.solana.chainId || 101,\n                identity: info.uuid,\n                login_type: 'particle' as any,\n                action: action as any,\n                wallet_address: wallet.public_address,\n                user_info: JSON.stringify(info),\n            });\n            /* eslint-enable */\n        }\n    }\n};\n", "export const getVersion = () => {\n    // replace when build\n    return 'web_' + '1.4.7';\n};\n", "import type { AuthType, ERC4337Options, ServerError, UserInfo } from '@particle-network/auth-core';\nimport type { WalletOption } from '@particle-network/wallet';\nimport type { PromptSettingConfig } from '../api/model/bundle';\nimport type { CurrencyUnit, Theme } from '../types';\n\nexport type ViewType = 'desktop' | 'mobile';\n\nexport interface NavigateOptions {\n    replace?: boolean;\n    back?: boolean;\n    state?: any;\n}\n\nexport interface IAuthCoreModal {\n    rootModalContainer: HTMLDivElement | null;\n    rootBody: HTMLDivElement | null;\n    particleModalVisible: boolean;\n    viewType: ViewType;\n    closable?: boolean;\n}\n\nexport interface ICustomRouter {\n    path: string;\n    replace?: boolean;\n    state?: any;\n    history?: any[];\n    children?: React.ReactNode;\n}\n\nexport enum AuthCoreModalEvent {\n    Login = 'login', // \u767B\u5F55\n    LoginSuccess = 'loginSuccess', // \u767B\u5F55\u6210\u529F\n    LoginFail = 'loginFail', // \u767B\u5F55\u5931\u8D25\n    SignResponse = 'signResponse', // \u7B7E\u540D\u54CD\u5E94\n}\n\nexport type Language = 'en' | 'zh-cn' | 'ja' | 'ko' | 'zh-tw';\n\nexport interface ThemeStyle {\n    primaryBtnColor?: string;\n    primaryBtnBackgroundColor?: string;\n    secondaryBtnColor?: string;\n    secondaryBtnBackgroundColor?: string;\n    textColor?: string;\n    secondaryTextColor?: string;\n    themeBackgroundColor?: string;\n    iconBorderColor?: string;\n    accentColor?: string;\n    inputBackgroundColor?: string;\n    inputBorderColor?: string;\n    inputPlaceholderColor?: string;\n    cardBorderColor?: string;\n    cardUnclickableBackgroundColor?: string;\n    cardUnclickableBorderColor?: string;\n    cardDividerColor?: string;\n    tagBackgroundColor?: string;\n    modalBackgroundColor?: string;\n    tipsBackgroundColor?: string;\n}\n\nexport interface CustomStyle {\n    logo?: string;\n    projectName?: string;\n    subtitle?: string;\n    modalWidth?: number;\n    modalHeight?: number;\n    zIndex?: number;\n    primaryBtnBorderRadius?: number | string;\n    modalBorderRadius?: number | string;\n    cardBorderRadius?: number | string;\n    fontFamily?: string;\n    theme?: {\n        dark?: ThemeStyle;\n        light?: ThemeStyle;\n    };\n}\n\nexport interface AuthCoreModalOptions {\n    projectId: string;\n    clientKey: string;\n    appId: string;\n    authTypes?: AuthType[];\n    themeType?: Theme;\n    fiatCoin?: CurrencyUnit;\n    erc4337?: ERC4337Options;\n    language?: Language;\n    promptSettingConfig?: PromptSettingConfig;\n    customStyle?: CustomStyle;\n    wallet?: Omit<WalletOption, 'language' | 'erc4337'>;\n    web3Modal?: any; // optional: add to support @web3modal/ethers\n}\n\nexport type ConnectionStatus = 'loading' | 'connecting' | 'connected' | 'disconnected';\n\nexport type SocialConnectCallback = {\n    onSuccess?: (info: UserInfo) => void;\n    onError?: (error: ServerError | Error) => void;\n};\n\nexport interface OpenBuyOptions {\n    network?: string;\n    fiatCoin?: string;\n    cryptoCoin?: string;\n    fiatAmt?: number;\n    fixFiatCoin?: boolean;\n    fixCryptoCoin?: boolean;\n    fixFiatAmt?: boolean;\n    walletAddress?: string;\n}\n\nexport type OpenBuyOptionsKeys = keyof OpenBuyOptions;\n", "import { getLatestAuthType, isSocialAuthType } from '@particle-network/auth-core';\nimport { useEffect } from 'react';\nimport { useConnect, useEthereum } from './hooks';\n\n/**\n * https://github.com/WalletConnect/web3modal/\n */\nconst Web3ModalProvider = ({ web3Modal }: { web3Modal?: any }) => {\n    const { connectionStatus } = useConnect();\n    const { provider } = useEthereum();\n\n    useEffect(() => {\n        if (web3Modal && connectionStatus === 'connected' && isSocialAuthType(getLatestAuthType()) && provider) {\n            //https://github.com/WalletConnect/web3modal/blob/8109853/packages/ethers/src/client.ts#L560\n            web3Modal?.setEIP6963Provider?.(provider, 'Particle Wallet');\n        }\n    }, [connectionStatus, provider, web3Modal]);\n    return undefined;\n};\n\nexport default Web3ModalProvider;\n", "import {\n    AuthCoreEvent,\n    AuthType,\n    check,\n    disconnect,\n    getCloudflareTurnstileResponse,\n    getConnectCaptcha,\n    isConnected,\n    isNullish,\n    particleAuth,\n    requireNotNullish,\n    type CloudflareOptions,\n    type ConnectParam,\n    type E164Phone,\n    type UserInfo,\n} from '@particle-network/auth-core';\nimport { useCallback, useEffect, useMemo } from 'react';\nimport { AuthPage } from '../../components/customRouter';\nimport { useCustomNavigate, useEvents, useParticleAuth } from '../../context';\nimport { isValidCaptcha, isValidE164PhoneNumber, isValidEmail } from '../../utils';\nimport { AuthCoreModalEvent } from '../types';\nimport useLogin from './useLogin';\n\nexport const useConnect = () => {\n    const navigate = useCustomNavigate();\n    const { events } = useEvents();\n    const {\n        modalOptions,\n        setLoginAuthorization,\n        setConnectionStatus,\n        connectionStatus,\n        setAuthCoreModal,\n        socialConnectCallback,\n        setSocialConnectCallback,\n    } = useParticleAuth();\n    const { loginHandler, socialAuthLogin } = useLogin();\n\n    const isLoginDirectly = useCallback((options: ConnectParam) => {\n        // @ts-ignore\n        const { email, phone, code, jwt, socialType } = options;\n\n        return ((isValidEmail(email) || isValidE164PhoneNumber(phone)) && isValidCaptcha(code)) || socialType || jwt;\n    }, []);\n\n    const connect = useCallback(\n        async (options?: ConnectParam): Promise<UserInfo | undefined> => {\n            if (options && options.authorization) {\n                check(options.chain, 'chain is required when authorization is provided');\n            }\n            if (options && modalOptions.authTypes && modalOptions.authTypes.length > 0) {\n                if ('email' in options && !isNullish(options.email)) {\n                    check(\n                        modalOptions.authTypes.includes(AuthType.email),\n                        'Email login is not supported, please add AuthType.email to AuthCoreContextProvider init-param \"authTypes\"'\n                    );\n                } else if ('phone' in options && !isNullish(options.phone)) {\n                    check(\n                        modalOptions.authTypes.includes(AuthType.phone),\n                        'Phone login is not supported, please add AuthType.phone to AuthCoreContextProvider init-param \"authTypes\"'\n                    );\n                } else if ('socialType' in options && options.socialType) {\n                    const type = (options.socialType as string) === 'twitterv1' ? 'twitter' : options.socialType;\n                    check(\n                        modalOptions.authTypes.includes(type as AuthType),\n                        `${type} login is not supported, please add AuthType.${type} to AuthCoreContextProvider init-param \"authTypes\"`\n                    );\n                } else if ('jwt' in options && options.jwt) {\n                    check(\n                        modalOptions.authTypes.includes(AuthType.jwt),\n                        'JWT login is not supported, please add AuthType.jwt to AuthCoreContextProvider init-param \"authTypes\"'\n                    );\n                }\n            }\n            setConnectionStatus('connecting');\n            return new Promise((resolve, reject) => {\n                events.once(AuthCoreModalEvent.LoginSuccess, (userInfo) => {\n                    setConnectionStatus('connected');\n                    // \u5173\u95ED\u7A97\u53E3\n                    setAuthCoreModal({\n                        particleModalVisible: false,\n                    });\n                    const { socialType, nonce, code } = (options as any) || {};\n                    if (socialType && nonce && code) {\n                        socialConnectCallback?.onSuccess?.(userInfo);\n                    }\n                    resolve(userInfo);\n                });\n\n                events.once(AuthCoreModalEvent.LoginFail, (error) => {\n                    setConnectionStatus('disconnected');\n                    setAuthCoreModal({\n                        particleModalVisible: false,\n                    });\n                    const { socialType, nonce, code } = (options as any) || {};\n                    if (socialType && nonce && code) {\n                        socialConnectCallback?.onError?.(error);\n                    }\n                    reject(error);\n                });\n                if (options && isLoginDirectly(options)) {\n                    const { authorization, chain, socialType, nonce, prompt, code } = options as any;\n                    if (authorization) {\n                        setLoginAuthorization({ authorization, chain: requireNotNullish(chain) });\n                    } else {\n                        setLoginAuthorization(undefined);\n                    }\n                    if (socialType && (!nonce || !code)) {\n                        socialAuthLogin({\n                            socialType,\n                            prompt,\n                            authorization,\n                            chain,\n                        });\n                    } else {\n                        loginHandler(options as ConnectParam);\n                    }\n                } else {\n                    navigate(AuthPage.Login, {\n                        state: options,\n                    });\n                }\n            });\n        },\n        [events, modalOptions.authTypes, loginHandler, isLoginDirectly, navigate, socialConnectCallback]\n    );\n\n    useEffect(() => {\n        const onConnect = () => {\n            setConnectionStatus('connected');\n        };\n\n        const onDisconnect = () => {\n            setConnectionStatus('disconnected');\n        };\n        particleAuth.on(AuthCoreEvent.ParticleAuthConnect, onConnect);\n        particleAuth.on(AuthCoreEvent.ParticleAuthDisconnect, onDisconnect);\n\n        if (isConnected()) {\n            setConnectionStatus('connected');\n        }\n\n        return () => {\n            particleAuth.off(AuthCoreEvent.ParticleAuthConnect, onConnect);\n            particleAuth.off(AuthCoreEvent.ParticleAuthDisconnect, onDisconnect);\n        };\n    }, []);\n\n    const requestConnectCaptcha = useCallback(\n        async (\n            config: { email: string } | { phone: E164Phone; cloudflareOptions?: CloudflareOptions }\n        ): Promise<boolean> => {\n            if ('email' in config && config.email) {\n                return await getConnectCaptcha(config);\n            } else if ('phone' in config && config.phone) {\n                const token = await getCloudflareTurnstileResponse(config.cloudflareOptions);\n                // eslint-disable-next-line camelcase\n                return await getConnectCaptcha({ phone: config.phone, cf_turnstile_response: token });\n            }\n            throw new Error('Invalid config');\n        },\n        []\n    );\n\n    const connected = useMemo(() => connectionStatus === 'connected', [connectionStatus]);\n\n    return {\n        connect,\n        disconnect,\n        connectionStatus,\n        connected,\n        requestConnectCaptcha,\n        setSocialConnectCallback,\n    };\n};\n", "import { RecordType } from '@particle-network/analytics';\nimport type { Authorization, ConnectParam, ConnectWithSocialParam, SocialAuthType } from '@particle-network/auth-core';\nimport { analyticsRecord, connect, thirdpartyAuth } from '@particle-network/auth-core';\nimport { type Chain } from '@particle-network/chains';\nimport base64url from 'base64url';\nimport { useCallback } from 'react';\nimport { useCustomNavigate, useParticleAuth } from '..';\nimport { isPromptSetMasterPassword } from '../../api/master-password';\nimport { AuthPage } from '../../components/customRouter';\nimport { sendAnalyticsActive } from '../../utils/sendAnalyticsActive';\nimport { AuthCoreModalEvent } from '../types';\n\nconst useLogin = () => {\n    const navigate = useCustomNavigate();\n    const { loginSuccessRedirectToApp, modalOptions, events } = useParticleAuth();\n    const loginHandler = useCallback(\n        async (data: ConnectParam, emitError: boolean = true) => {\n            try {\n                if (!data.chain && modalOptions?.wallet?.customStyle?.supportChains?.length) {\n                    data.chain = modalOptions?.wallet?.customStyle?.supportChains[0];\n                }\n                const userInfo = await connect(data);\n                const { token = '', ...restInfo } = userInfo;\n                sendAnalyticsActive('login', restInfo);\n\n                analyticsRecord({\n                    // eslint-disable-next-line camelcase\n                    record_type: RecordType.PAGE_LOGIN_BUTTON_CLICK_SUCCESS, // \u767B\u5F55\u6210\u529F\n                });\n                console.log('login successful, check master password');\n\n                if (userInfo.security_account?.has_set_master_password) {\n                    console.log('login successful, start verify master password');\n                    navigate(AuthPage.MasterPasswordVerify, {\n                        replace: true,\n                        state: {\n                            loginVerifyMasterPassword: true,\n                        },\n                    });\n                } else {\n                    if (\n                        isPromptSetMasterPassword(\n                            modalOptions.promptSettingConfig?.promptMasterPasswordSettingWhenLogin\n                        )\n                    ) {\n                        console.log('login successful, popup set master password');\n                        navigate(AuthPage.MasterPasswordPrompt, {\n                            replace: true,\n                        });\n                    } else {\n                        loginSuccessRedirectToApp();\n                    }\n                }\n            } catch (error) {\n                analyticsRecord({\n                    // eslint-disable-next-line camelcase\n                    record_type: RecordType.PAGE_LOGIN_BUTTON_CLICK_FAILURE, // \u767B\u5F55\u5931\u8D25\n                });\n                if (emitError) {\n                    console.log('login failed, emit LoginFail event', error);\n                    events.emit(AuthCoreModalEvent.LoginFail, error);\n                } else {\n                    throw error;\n                }\n            }\n        },\n        [\n            modalOptions.promptSettingConfig,\n            navigate,\n            loginSuccessRedirectToApp,\n            modalOptions?.wallet?.customStyle?.supportChains,\n        ]\n    );\n\n    const socialAuthLogin = useCallback(\n        async (\n            options: ConnectWithSocialParam & {\n                authorization?: Authorization;\n                chain?: Chain;\n            }\n        ) => {\n            try {\n                const appState = base64url(\n                    JSON.stringify({\n                        chain: options.chain,\n                        authorization: options.authorization,\n                        socialType: options.socialType,\n                    })\n                );\n                await thirdpartyAuth({\n                    authType: options.socialType as SocialAuthType,\n                    appState,\n                    prompt: options.prompt,\n                });\n            } catch (error) {\n                events.emit(AuthCoreModalEvent.LoginFail, error);\n            }\n        },\n        [events]\n    );\n\n    return { loginHandler, socialAuthLogin };\n};\n\nexport default useLogin;\n", "export function save(key: string, value: string | null) {\n    if (value) {\n        localStorage.setItem(key, value);\n    } else {\n        removeItem(key);\n    }\n}\n\nexport function load(key: string): string | null {\n    return localStorage.getItem(key);\n}\n\nexport function once(key: string): boolean {\n    const value = localStorage.getItem(key);\n\n    if (!value) {\n        localStorage.setItem(key, '1');\n    }\n    return Boolean(value);\n}\n\nexport function removeItem(key: string) {\n    localStorage.removeItem(key);\n}\n\nexport class PreferenceKey {\n    static PN_OPEN_SET_PAYMENT_PASSWORD = 'PN_OPEN_SET_PAYMENT_PASSWORD';\n    static PN_OPEN_SET_MASTER_PASSWORD = 'PN_OPEN_SET_MASTER_PASSWORD';\n}\n", "export interface AuthorizationOptions {\n    message?: string;\n    uniq?: boolean;\n}\n\nexport enum PromptSettingType {\n    /**\n     * \u4E0D\u63D0\u9192\n     */\n    none = 0,\n    /**\n     * \u9996\u6B21\u63D0\u9192\n     */\n    first = 1,\n    /**\n     * \u6BCF\u6B21\u90FD\u63D0\u9192\n     */\n    every = 2,\n    /**\n     * \u6BCF\u6B21\u90FD\u63D0\u9192\uFF0C\u4E14\u4E0D\u53EF\u8DF3\u8FC7\n     */\n    everyAndNotSkip = 3,\n}\n\nexport interface PromptSettingConfig {\n    promptPaymentPasswordSettingWhenSign?: PromptSettingType | boolean; // 0: \u4E0D\u63D0\u9192\uFF0C 1: \u9996\u6B21\u63D0\u9192\uFF0C 2: \u6BCF\u6B21\u90FD\u63D0\u9192, 3: \u6BCF\u6B21\u90FD\u63D0\u9192\uFF0C\u4E14\u4E0D\u53EF\u8DF3\u8FC7\n    promptMasterPasswordSettingWhenLogin?: PromptSettingType | boolean; // 0: \u4E0D\u63D0\u9192\uFF0C 1: \u9996\u6B21\u63D0\u9192\uFF0C 2: \u6BCF\u6B21\u90FD\u63D0\u9192\uFF0C 3: \u6BCF\u6B21\u90FD\u63D0\u9192\uFF0C\u4E14\u4E0D\u53EF\u8DF3\u8FC7\n}\n", "import { PreferenceKey, once } from '../repository';\nimport { PromptSettingType } from './model/bundle';\n\nexport const isPromptSetMasterPassword = (promptMasterPasswordSettingWhenLogin?: number | boolean) => {\n    if (\n        promptMasterPasswordSettingWhenLogin === PromptSettingType.every ||\n        promptMasterPasswordSettingWhenLogin === PromptSettingType.everyAndNotSkip\n    ) {\n        return true;\n    } else if (\n        promptMasterPasswordSettingWhenLogin ||\n        promptMasterPasswordSettingWhenLogin === PromptSettingType.first\n    ) {\n        return !once(PreferenceKey.PN_OPEN_SET_MASTER_PASSWORD);\n    } else {\n        return false;\n    }\n};\n", "import type { AuthType, ERC4337Options } from '@particle-network/auth-core';\nimport type { WalletOption } from '@particle-network/wallet';\nimport { useParticleAuth } from '..';\nimport type { CurrencyUnit, Theme } from '../../types';\nimport { type CustomStyle, type Language } from '../types';\nimport type { PromptSettingConfig } from './../../api/model/bundle';\n\nexport const useCustomize = () => {\n    const { modalOptions, setModalOptions } = useParticleAuth();\n\n    const setThemeType = (themeType?: Theme) => {\n        setModalOptions({\n            themeType,\n        });\n    };\n\n    const setCustomStyle = (customStyle?: CustomStyle) => {\n        setModalOptions({\n            customStyle: customStyle ? { ...customStyle } : undefined,\n        });\n    };\n\n    const setLanguage = (language?: Language) => {\n        setModalOptions({\n            language,\n        });\n    };\n\n    const setAuthTypes = (authTypes?: AuthType[]) => {\n        setModalOptions({\n            authTypes: authTypes ? [...authTypes] : undefined,\n        });\n    };\n\n    const setFiatCoin = (fiatCoin?: CurrencyUnit) => {\n        setModalOptions({\n            fiatCoin,\n        });\n    };\n\n    const setERC4337 = (erc4337?: ERC4337Options) => {\n        setModalOptions({\n            erc4337,\n        });\n    };\n\n    const setWalletOptions = (wallet: Omit<WalletOption, 'language' | 'erc4337'>) => {\n        setModalOptions({\n            wallet: { ...wallet },\n        });\n    };\n\n    const setPromptSettingConfig = (promptSettingConfig?: PromptSettingConfig) => {\n        setModalOptions({\n            promptSettingConfig,\n        });\n    };\n\n    return {\n        themeType: modalOptions.themeType,\n        setThemeType,\n        customStyle: modalOptions.customStyle,\n        setCustomStyle: setCustomStyle,\n        walletOptions: modalOptions.wallet,\n        setWalletOptions,\n        language: modalOptions.language,\n        setLanguage,\n        authTypes: modalOptions.authTypes,\n        setAuthTypes,\n        fiatCoin: modalOptions.fiatCoin,\n        setFiatCoin,\n        erc4337: modalOptions.erc4337,\n        setERC4337,\n        promptSettingConfig: modalOptions.promptSettingConfig,\n        setPromptSettingConfig,\n    };\n};\n", "import {\n    AuthCoreEvent,\n    AuthType,\n    EvmRpcMethod,\n    SignTypedDataVersion,\n    check,\n    getLatestAuthType,\n    isConnected,\n    particleAuth,\n    requireNotNullish,\n    type EIP1559TxData,\n    type MessageTypes,\n    type PrefixedHexString,\n    type TxData,\n    type TypedDataV1,\n    type TypedMessage,\n} from '@particle-network/auth-core';\nimport { chains, type ChainInfo } from '@particle-network/chains';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useCustomNavigate, useEvents, useModalOptions, useParticleAuth } from '..';\nimport { AuthError } from '../../api/model/authError';\nimport { AuthPage } from '../../components/customRouter';\nimport { isClient } from '../../utils';\nimport { getEvmChain } from '../../utils/chain-utils';\nimport { toHexPrefixString } from '../../utils/common-utils';\nimport evmSendTransaction from '../../utils/evmSendTransaction';\nimport { EVMProvider } from '../evmProvider';\nimport { AuthCoreModalEvent } from '../types';\nimport { useAuthCore } from './useAuthCore';\nimport { useConnect } from './useConnect';\nimport { useUserInfo } from './useUserInfo';\n\nexport const useEthereum = () => {\n    const navigate = useCustomNavigate();\n\n    const { events } = useEvents();\n\n    const [chainId, setChainId] = useState<number>(Number(particleAuth.ethereum.chainId));\n\n    const [chainInfo, setChainInfo] = useState<ChainInfo>(requireNotNullish(getEvmChain(chainId)));\n\n    const [address, setAddress] = useState(particleAuth.ethereum.selectedAddress);\n\n    const { userInfo } = useUserInfo();\n\n    const { needRestoreWallet } = useAuthCore();\n\n    const { modalOptions } = useModalOptions();\n\n    const { setAuthCoreModal } = useParticleAuth();\n\n    const { connect } = useConnect();\n\n    const silentApprove = useMemo(() => {\n        if (\n            needRestoreWallet ||\n            userInfo?.security_account.has_set_payment_password ||\n            modalOptions.promptSettingConfig?.promptPaymentPasswordSettingWhenSign ||\n            getLatestAuthType() !== AuthType.jwt\n        ) {\n            return false;\n        }\n        return true;\n    }, [\n        userInfo?.security_account.has_set_payment_password,\n        needRestoreWallet,\n        modalOptions.promptSettingConfig?.promptPaymentPasswordSettingWhenSign,\n    ]);\n\n    useEffect(() => {\n        const onChainChanged = (chainId: string) => {\n            setChainId(Number(chainId));\n        };\n        particleAuth.ethereum.on('chainChanged', onChainChanged);\n\n        const onConnect = () => {\n            setAddress(particleAuth.ethereum.selectedAddress);\n        };\n        particleAuth.ethereum.on('connect', onConnect);\n\n        const onAccountsChanged = (accounts: string[]) => {\n            if (accounts[0]) {\n                setAddress(accounts[0]);\n            }\n        };\n        particleAuth.ethereum.on('accountsChanged', onAccountsChanged);\n\n        const onDisconnect = () => {\n            setAddress(null);\n        };\n        particleAuth.ethereum.on('disconnect', onDisconnect);\n\n        const onRequestAccount = ({ resolve, reject, param }: any) => {\n            connect(param)\n                .then((userInfo) => {\n                    resolve(userInfo);\n                })\n                .catch((error) => {\n                    reject(error);\n                });\n        };\n        particleAuth.on(AuthCoreEvent.RequestEthereumAccount, onRequestAccount);\n\n        return () => {\n            particleAuth.ethereum.off('chainChanged', onChainChanged);\n            particleAuth.ethereum.off('connect', onConnect);\n            particleAuth.ethereum.off('accountsChanged', onAccountsChanged);\n            particleAuth.ethereum.off('disconnect', onDisconnect);\n            particleAuth.off(AuthCoreEvent.RequestEthereumAccount, onRequestAccount);\n        };\n    }, [connect]);\n\n    useEffect(() => {\n        if (chainId) {\n            setChainInfo(requireNotNullish(getEvmChain(chainId)));\n        }\n    }, [chainId]);\n\n    const checkAuthCoreState = () => {\n        check(particleAuth, 'Please init first!');\n        check(isConnected(), AuthError.notLogin());\n        check(particleAuth.ethereum.selectedAddress, 'Please create wallet first!');\n    };\n\n    const signImpl = useCallback(\n        async <T>(state: { method: string; param: unknown }): Promise<T> => {\n            checkAuthCoreState();\n            const result = await new Promise<T>((resolve, reject) => {\n                if (events.listenerCount(AuthCoreModalEvent.SignResponse) > 0) {\n                    reject(AuthError.pending('sign'));\n                } else {\n                    events.once(AuthCoreModalEvent.SignResponse, (response) => {\n                        if (response.error) {\n                            reject(response.error);\n                        } else {\n                            resolve(response.result);\n                        }\n                        setAuthCoreModal({ particleModalVisible: false });\n                    });\n                    navigate(AuthPage.EvmSign, {\n                        replace: true,\n                        state,\n                    });\n                }\n            });\n            return result;\n        },\n        [navigate, events]\n    );\n\n    const signMessage = useCallback(\n        async (message: PrefixedHexString | string, uniq?: boolean): Promise<string> => {\n            if (silentApprove) {\n                const result = await particleAuth.ethereum.signMessage(toHexPrefixString(message), uniq);\n                return result;\n            } else {\n                const result = await signImpl<string>({\n                    param: toHexPrefixString(message),\n                    method: uniq ? EvmRpcMethod.personalSignUniq : EvmRpcMethod.personalSign,\n                });\n                return result;\n            }\n        },\n        [signImpl, silentApprove]\n    );\n\n    const signTypedData = useCallback(\n        async <V extends SignTypedDataVersion, T extends MessageTypes>({\n            data,\n            version,\n            uniq,\n        }: {\n            data: V extends 'V1' ? TypedDataV1 : TypedMessage<T>;\n            version: V;\n            uniq?: boolean;\n        }): Promise<string> => {\n            if (silentApprove) {\n                const result = await particleAuth.ethereum.signTypedData({ data, version, uniq });\n                return result;\n            } else {\n                const result = await signImpl<string>({\n                    param: data,\n                    method: getSignTypedDataMethod({ version, uniq }),\n                });\n                return result;\n            }\n        },\n        [signImpl, silentApprove]\n    );\n\n    const sendTransaction = useCallback(\n        async (transaction: Omit<TxData, 'from'> | Omit<EIP1559TxData, 'from'>): Promise<string> => {\n            if (transaction.chainId && !chains.getEVMChainInfoById(Number(transaction.chainId))) {\n                throw new Error(`The chainId: ${transaction.chainId} is not supported.`);\n            }\n\n            if (silentApprove) {\n                const result = await evmSendTransaction(transaction);\n                return result;\n            } else {\n                const result = await signImpl<string>({\n                    param: { ...transaction, from: address, chainId: transaction.chainId || chainId },\n                    method: EvmRpcMethod.ethSendTransaction,\n                });\n                return result;\n            }\n        },\n        [address, chainId, signImpl, silentApprove]\n    );\n\n    const switchChain = useCallback(async (id: number | PrefixedHexString) => {\n        await requireNotNullish(particleAuth, 'Please init first!').ethereum.switchChain(id);\n    }, []);\n\n    const enable = useCallback(async (): Promise<string> => {\n        const result = await requireNotNullish(particleAuth, 'Please init first!').ethereum.enable();\n        return result[0];\n    }, []);\n\n    const provider = useMemo((): EVMProvider => {\n        if (isClient() && window.particle?.ethereum) {\n            return window.particle?.ethereum;\n        } else {\n            const eip1193Provider = new EVMProvider();\n            eip1193Provider.signMessage = signMessage;\n            eip1193Provider.signTypedData = signTypedData;\n            eip1193Provider.sendTransaction = sendTransaction;\n            if (isClient()) {\n                if (window.particle) {\n                    window.particle.ethereum = eip1193Provider;\n                } else {\n                    window.particle = { ethereum: eip1193Provider };\n                }\n            }\n            return eip1193Provider;\n        }\n    }, []);\n\n    useEffect(() => {\n        if (provider) {\n            provider.signMessage = signMessage;\n            provider.signTypedData = signTypedData;\n            provider.sendTransaction = sendTransaction;\n        }\n    }, [provider, signMessage, signTypedData, sendTransaction]);\n\n    useEffect(() => {\n        //https://eips.ethereum.org/EIPS/eip-6963\n        if (provider && typeof window !== 'undefined') {\n            const info = {\n                uuid: 'cf589558-848b-4b1b-9ee7-800b5bbc07da',\n                name: 'Particle Wallet',\n                icon: 'https://static.particle.network/logo-small.png',\n                rdns: 'network.particle',\n            };\n            const announceProvider = () => {\n                window.dispatchEvent(\n                    new CustomEvent('eip6963:announceProvider', {\n                        detail: Object.freeze({\n                            provider,\n                            info,\n                        }),\n                    })\n                );\n            };\n            window.addEventListener('eip6963:requestProvider', announceProvider);\n            announceProvider();\n            return () => {\n                window.removeEventListener('eip6963:requestProvider', announceProvider);\n            };\n        }\n    }, [provider]);\n\n    return {\n        provider,\n        address,\n        chainId,\n        chainInfo,\n        switchChain,\n        signMessage,\n        signTypedData,\n        sendTransaction,\n        enable,\n    };\n};\n\nfunction getSignTypedDataMethod({ version, uniq }: { version: SignTypedDataVersion; uniq?: boolean }): string {\n    if (SignTypedDataVersion.V1 === version) {\n        return EvmRpcMethod.ethSignTypedDataV1;\n    } else if (SignTypedDataVersion.V3 === version) {\n        return EvmRpcMethod.ethSignTypedDataV3;\n    } else {\n        return uniq ? EvmRpcMethod.ethSignTypedDataV4Uniq : EvmRpcMethod.ethSignTypedDataV4;\n    }\n}\n", "import {\n    EvmEnhancedMethod,\n    GasFeeMode,\n    isNullish,\n    particleAuth,\n    type EIP1559TxData,\n    type GasFeeResult,\n    type TxData,\n} from '@particle-network/auth-core';\nimport { chains } from '@particle-network/chains';\nimport { bnToHex } from './common-utils';\nimport { toWei } from './number-utils';\nimport { parseTransaction } from './transaction-utils';\n\nconst evmSendTransaction = async (transaction: Omit<TxData | EIP1559TxData, 'from'>): Promise<string> => {\n    const chainId = Number(transaction.chainId || particleAuth.ethereum.chainId);\n    const txData = {\n        ...transaction,\n        from: particleAuth.ethereum.selectedAddress!,\n        chainId,\n    };\n\n    const chain = chains.getEVMChainInfoById(chainId)!;\n\n    if (isNullish(txData.data)) {\n        txData.data = '0x';\n    }\n\n    const evmTx = parseTransaction(txData, chain);\n\n    if (!evmTx.gasLimit) {\n        evmTx.gasLimit = await fetchEstimateGas(\n            { from: evmTx.from, to: evmTx.to, value: evmTx.value, data: evmTx.data },\n            chainId\n        );\n    }\n\n    if (Number(evmTx.type) === 2) {\n        if (!evmTx.maxPriorityFeePerGas || !evmTx.maxFeePerGas) {\n            const gasFee = await fetchSuggestedGasFee(chainId);\n            evmTx.maxFeePerGas = bnToHex(toWei(gasFee[GasFeeMode.medium].maxFeePerGas, 'gwei'));\n            evmTx.maxPriorityFeePerGas = bnToHex(toWei(gasFee[GasFeeMode.medium].maxPriorityFeePerGas, 'gwei'));\n        }\n    } else {\n        if (!evmTx.gasPrice) {\n            const gasFee = await fetchSuggestedGasFee(chainId);\n            evmTx.gasPrice = bnToHex(toWei(gasFee[GasFeeMode.medium].maxFeePerGas, 'gwei'));\n        }\n    }\n\n    const result = await particleAuth.ethereum.sendTransaction(evmTx);\n    return result;\n};\n\nconst fetchEstimateGas = async (\n    param: {\n        from: string;\n        to?: string;\n        value?: string | number;\n        data?: string;\n    },\n    chainId: number\n): Promise<string> => {\n    if (!param.to || param.to.length === 0) {\n        delete param.to;\n    }\n    const result = await particleAuth.ethereum.request({\n        chainId,\n        method: 'eth_estimateGas',\n        params: [param],\n    });\n    return result;\n};\n\nconst fetchSuggestedGasFee = async (chainId: number): Promise<GasFeeResult> => {\n    const result = await particleAuth.ethereum.request({\n        chainId,\n        method: EvmEnhancedMethod.suggestedGasFees,\n    });\n    return result;\n};\n\nexport default evmSendTransaction;\n", "import type { PrefixedHexString } from '@ethereumjs/util';\nimport { isHexString, stripHexPrefix } from '@ethereumjs/util';\nimport { BigNumber } from 'bignumber.js';\nimport BN from 'bn.js';\nimport ethjs from 'ethjs-unit';\nimport numbro from 'numbro';\nimport { bnToHex, isNullish, toHexPrefixString } from './common-utils';\n\nexport function formatTokenAmount(amount: number, decimals: number): string {\n    if (!amount || !decimals) {\n        return '0';\n    }\n\n    return numbro(amount / Math.pow(10, decimals)).format({\n        thousandSeparated: true,\n        mantissa: decimals,\n        trimMantissa: true,\n    });\n}\n\nexport function toWeiBigNumber(amount: string | number | undefined, unit = 'ether'): BigNumber {\n    return new BigNumber(bnToHex(toWei(amount, unit)));\n}\n\nexport function toBigNumber(amount: string | number | undefined): BigNumber {\n    if (typeof amount === 'string' || typeof amount === 'number') {\n        return new BigNumber(amount);\n    }\n    return new BigNumber(toHexPrefixString(amount));\n}\n\nexport function toWei(amount: BN | string | number | undefined, unit = 'ether'): BN {\n    if (!amount) {\n        return new BN(0);\n    }\n\n    return ethjs.toWei(amount, unit);\n}\n\nexport function fromWei(amount: BN | PrefixedHexString | undefined, unit = 'ether'): string {\n    if (!amount) {\n        return '0';\n    }\n\n    let result;\n    if (typeof amount === 'string' && amount.startsWith('0x')) {\n        result = ethjs.fromWei(new BN(stripHexPrefix(amount), 16), unit);\n    } else {\n        result = ethjs.fromWei(new BN(amount), unit);\n    }\n    return result;\n}\n\nexport function fromWeiFormat(amount: BN | PrefixedHexString | undefined, unit = 'ether', mantissa = 6): string {\n    if (!amount) {\n        return '0';\n    }\n\n    let result;\n    if (typeof amount === 'string' && amount.startsWith('0x')) {\n        result = ethjs.fromWei(new BN(stripHexPrefix(amount), 16), unit);\n    } else {\n        result = ethjs.fromWei(new BN(amount), unit);\n    }\n    return numbro(result).format({\n        thousandSeparated: true,\n        trimMantissa: true,\n        mantissa: mantissa,\n    });\n}\n\nexport function formatPrice({\n    amount,\n    price,\n    mantissa,\n    fiatCoin,\n}: {\n    amount: string | number;\n    price: number;\n    mantissa?: number;\n    fiatCoin: string;\n}): string {\n    if (!price) {\n        return '';\n    }\n    const value = new BigNumber(amount).multipliedBy(new BigNumber(price));\n    if (isNullish(mantissa)) {\n        if (value.lt(new BigNumber(1))) {\n            mantissa = 4;\n        } else {\n            mantissa = 2;\n        }\n    }\n\n    return `\u2248${numbro(value)\n        .format({\n            thousandSeparated: true,\n            trimMantissa: true,\n            mantissa: mantissa,\n        })\n        .replace(/-0$/, '0')} ${fiatCoin.toUpperCase()}`;\n}\n\nexport function trimDecimals(value: number | string, mantissa = 6): string {\n    return numbro(value).format({\n        thousandSeparated: true,\n        trimMantissa: true,\n        mantissa: mantissa,\n    });\n}\n\nexport function fromSunFormat(amount: PrefixedHexString | string, mantissa = 6): string {\n    const bn = new BigNumber(amount, isHexString(amount) ? 16 : 10);\n    const value = bn.div(new BigNumber(1000_000)).toString(10);\n    return numbro(value).format({\n        thousandSeparated: true,\n        trimMantissa: true,\n        mantissa: mantissa,\n    });\n}\n\n/**\n * \u683C\u5F0F\u5316\u4EE3\u5E01\u6570\u91CF\n * @param value \u539F\u59CB\u503C\uFF0C\u53EF\u4EE5\u662F BigNumber\u3001number \u6216 string \u7C7B\u578B\n * @param decimals \u5C0F\u6570\u4F4D\u6570\n * @returns \u683C\u5F0F\u5316\u540E\u7684\u4EE3\u5E01\u6570\u91CF\n */\nexport const formatTokenAmount2 = (value: BigNumber | number | string, decimals: number): string => {\n    let bn: BigNumber;\n    if (!(value instanceof BigNumber)) {\n        bn = new BigNumber(value).dividedBy(new BigNumber(10).pow(decimals));\n    } else {\n        bn = value;\n    }\n\n    const str = bn.toFixed();\n    const [int, dec] = str.split('.');\n    let decimalLength = 9;\n\n    if (int.length > 15) {\n        return bn.toExponential(2); // \u4F7F\u7528\u79D1\u5B66\u8BA1\u6570\u6CD5\uFF0C\u5C0F\u6570\u70B9\u540E\u4E24\u4F4D\n    }\n\n    if (int.length > 5) {\n        decimalLength = Math.max(9 - (int.length - 5), 0);\n    }\n\n    if (dec && decimalLength > 0) {\n        const decPart = dec.slice(0, decimalLength);\n        return new BigNumber(`${int}.${decPart}`).toFixed();\n    }\n\n    return int;\n};\n\n/**\n * \u683C\u5F0F\u5316\u6CD5\u5E01\u6570\u91CF\n * @param value \u539F\u59CB\u503C\uFF0C\u53EF\u4EE5\u662F BigNumber\u3001number \u6216 string \u7C7B\u578B\n * @returns \u683C\u5F0F\u5316\u540E\u7684\u6CD5\u5E01\u6570\u91CF\n */\nexport const formatFiatAmount = (value: BigNumber | number | string): string => {\n    let bn: BigNumber;\n    if (!(value instanceof BigNumber)) {\n        bn = new BigNumber(value);\n    } else {\n        bn = value;\n    }\n\n    const str = bn.toFixed();\n    const [int, dec] = str.split('.');\n\n    if (dec) {\n        const decPart = dec.slice(0, 4);\n        return new BigNumber(`${int}.${decPart}`).toFixed();\n    }\n\n    return int;\n};\n", "import { isHexString } from '@ethereumjs/util';\nimport type { GasFeeMode } from '@particle-network/auth-core';\nimport { tronAddressToHex, type EIP1559TxData, type EVMTransaction, type TxData } from '@particle-network/auth-core';\nimport type { Chain, ChainInfo } from '@particle-network/chains';\nimport { chains } from '@particle-network/chains';\nimport { BigNumber } from 'bignumber.js';\nimport { toHexPrefixString } from './common-utils';\n\nexport function isEIP1559Type(type: string | number | undefined): boolean {\n    if (typeof type == 'number') {\n        return type === 2;\n    } else if (typeof type == 'string') {\n        return Number(type) === 2;\n    }\n    return false;\n}\n\nconst parseValue = (value: string | number) => {\n    if (typeof value === 'string') {\n        if (value.startsWith('0x')) {\n            return value;\n        } else {\n            return `0x${new BigNumber(value).toString(16)}`;\n        }\n    } else {\n        return toHexPrefixString(value);\n    }\n};\n\nexport function parseTransaction(txData: TxData | EIP1559TxData, chainInfo: ChainInfo): EVMTransaction {\n    let nonce,\n        gasPrice,\n        gasLimit,\n        from,\n        to,\n        value,\n        data,\n        type,\n        chainId,\n        maxPriorityFeePerGas,\n        maxFeePerGas,\n        action,\n        gasLevel;\n\n    const tron = isTron(chainInfo);\n    if (tron && !isHexString(txData.from)) {\n        from = tronAddressToHex(txData.from);\n    } else {\n        from = txData.from;\n    }\n    if (txData.to) {\n        if (tron && !isHexString(txData.to)) {\n            to = tronAddressToHex(txData.to);\n        } else {\n            to = txData.to;\n        }\n    }\n\n    if (txData.gas && !txData.gasLimit) {\n        gasLimit = parseValue(txData.gas);\n    } else if (txData.gasLimit) {\n        gasLimit = parseValue(txData.gasLimit);\n    }\n    if (txData.value) {\n        value = parseValue(txData.value);\n    }\n    if (txData.data) {\n        data = toHexPrefixString(txData.data);\n    }\n    if (txData.chainId) {\n        chainId = parseValue(txData.chainId);\n    } else {\n        chainId = parseValue(chainInfo.id);\n    }\n    if (txData.nonce) {\n        nonce = parseValue(txData.nonce);\n    }\n    if ('maxPriorityFeePerGas' in txData && txData.maxPriorityFeePerGas) {\n        maxPriorityFeePerGas = parseValue(txData.maxPriorityFeePerGas);\n    }\n    if ('maxFeePerGas' in txData && txData.maxFeePerGas) {\n        maxFeePerGas = parseValue(txData.maxFeePerGas);\n    }\n    if (txData.gasPrice) {\n        gasPrice = parseValue(txData.gasPrice);\n    }\n\n    if (txData.type || txData.type === 0) {\n        type = parseValue(txData.type);\n    } else {\n        if (\n            'maxPriorityFeePerGas' in txData &&\n            txData.maxPriorityFeePerGas &&\n            'maxFeePerGas' in txData &&\n            txData.maxFeePerGas &&\n            chains.isChainSupportEIP1559(chainInfo)\n        ) {\n            type = '0x2';\n        } else if ('gasPrice' in txData && txData.gasPrice) {\n            type = '0x0';\n        } else {\n            type = chains.isChainSupportEIP1559(chainInfo) ? '0x2' : '0x0';\n        }\n    }\n\n    if (txData.action && ['normal', 'cancel', 'speedup'].includes(txData.action)) {\n        action = txData.action;\n    } else {\n        action = undefined;\n    }\n\n    if (txData.gasLevel && ['custom', 'low', 'medium', 'high'].includes(txData.gasLevel)) {\n        gasLevel = txData.gasLevel as GasFeeMode;\n    } else {\n        gasLevel = undefined;\n    }\n\n    return {\n        nonce,\n        gasPrice,\n        gasLimit,\n        from,\n        to,\n        value,\n        data,\n        type,\n        chainId,\n        maxPriorityFeePerGas,\n        maxFeePerGas,\n        action,\n        gasLevel,\n    };\n}\n\nexport function isEMVMethod(method: string): boolean {\n    return typeof method === 'string' && (method.startsWith('eth_') || method.startsWith('personal_'));\n}\n\n/**\n * isEVMAddress\n * @param address\n * @returns\n */\nexport function isEVMAddress(address: string): boolean {\n    // @ts-ignore\n    return address && address.length === 42 && address.startsWith('0x');\n}\n\nexport function isTron(chain: Chain): boolean {\n    return chain.name.toLowerCase() === 'tron';\n}\n", "import { addHexPrefix, isHexString } from '@ethereumjs/util';\nimport { providerErrors, rpcErrors } from '@metamask/rpc-errors';\nimport {\n    EvmRpcMethod,\n    ethereumUtils,\n    isNullish,\n    requireNotNullish,\n    type ConnectParam,\n    type EIP1193Provider,\n    type EIP1559TxData,\n    type MessageTypes,\n    type PrefixedHexString,\n    type RpcInput,\n    type SignTypedDataVersion,\n    type TxData,\n    type TypedDataV1,\n    type TypedMessage,\n} from '@particle-network/auth-core';\nimport { chains } from '@particle-network/chains';\n\nexport class EVMProvider implements EIP1193Provider {\n    signMessage = async (message: PrefixedHexString | string, uniq?: boolean): Promise<string> => {\n        throw new Error('signMessage not implemented.');\n    };\n\n    sendTransaction = async (transaction: Omit<TxData | EIP1559TxData, 'from'>): Promise<string> => {\n        throw new Error('sendTransaction not implemented.');\n    };\n\n    signTypedData = async <V extends SignTypedDataVersion, T extends MessageTypes>({\n        data,\n        version,\n        uniq,\n    }: {\n        data: V extends 'V1' ? TypedDataV1 : TypedMessage<T>;\n        version: V;\n        uniq?: boolean;\n    }): Promise<string> => {\n        throw new Error('signTypedData not implemented.');\n    };\n\n    get selectedAddress(): string | null {\n        return requireNotNullish(window.particleAuth).ethereum.selectedAddress;\n    }\n\n    get chainId(): string {\n        return requireNotNullish(window.particleAuth).ethereum.chainId;\n    }\n\n    isConnected(): boolean {\n        return requireNotNullish(window.particleAuth).ethereum.isConnected();\n    }\n\n    on(event: string, listener: (...args: any[]) => void): this {\n        window.particleAuth?.ethereum.on(event, listener);\n        return this;\n    }\n\n    once(event: string, listener: (...args: any[]) => void): this {\n        window.particleAuth?.ethereum.once(event, listener);\n        return this;\n    }\n\n    off(event: string, listener: (...args: any[]) => void): this {\n        window.particleAuth?.ethereum.off(event, listener);\n        return this;\n    }\n\n    removeListener(event: string, listener: (...args: any[]) => void): this {\n        window.particleAuth?.ethereum.removeListener(event, listener);\n        return this;\n    }\n\n    /**\n     * \u9002\u914D [web3modal](https://github.com/WalletConnect/web3modal)\n     * @param event\n     */\n    private emit(event: string) {\n        if (event === 'disconnect') {\n            this.disconnect();\n        }\n    }\n\n    /**\n     * @deprecated user `request` instead\n     */\n    async enable(): Promise<string[]> {\n        return await requireNotNullish(window.particleAuth).ethereum.enable();\n    }\n\n    async disconnect() {\n        return await requireNotNullish(window.particleAuth).ethereum.disconnect();\n    }\n\n    async connect(param?: ConnectParam): Promise<string[]> {\n        return await requireNotNullish(window.particleAuth).ethereum.connect(param);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async request(data: Partial<RpcInput>): Promise<any> {\n        const method = data.method;\n        if (!method) {\n            throw rpcErrors.invalidParams('Invalid parameters: method is required.');\n        }\n        if (Object.values(EvmRpcMethod).includes(method as EvmRpcMethod)) {\n            if (method === EvmRpcMethod.ethAccounts || method === EvmRpcMethod.ethRequestAccounts) {\n                return await requireNotNullish(window.particleAuth).ethereum.request(data);\n            } else if (method === EvmRpcMethod.ethChainId) {\n                return this.chainId;\n            } else if (method.startsWith(EvmRpcMethod.ethSignTypedData)) {\n                this.#checkConnected();\n                /**\n                 * v1: https://medium.com/metamask/scaling-web3-with-signtypeddata-91d6efc8b290\n                 * v3: https://medium.com/metamask/eip712-is-coming-what-to-expect-and-how-to-use-it-bb92fd1a7a26\n                 * v4: https://docs.metamask.io/wallet/reference/eth_signtypeddata_v4/\n                 */\n                const isV1 = ethereumUtils.isSignTypedDataV1(method);\n                const from = isV1 ? data?.params?.[1] : data?.params?.[0];\n                let typedData = isV1 ? data?.params?.[0] : data?.params?.[1];\n                if (!from || typeof from !== 'string') {\n                    throw rpcErrors.invalidParams('Invalid parameters: must provide an Ethereum address.');\n                }\n                if (!typedData) {\n                    throw rpcErrors.invalidParams('Invalid parameters: must provide typed data.');\n                }\n                if (from.toLowerCase() !== this.selectedAddress?.toLowerCase()) {\n                    throw providerErrors.unauthorized();\n                }\n                if (typeof typedData === 'string') {\n                    typedData = JSON.parse(typedData);\n                }\n                const uniq = ethereumUtils.isUniq(method);\n                const version = ethereumUtils.getSignTypedVersion(method);\n\n                const result = await this.signTypedData({\n                    data: typedData as any, // eslint-disable-line\n                    version,\n                    uniq,\n                });\n                return result;\n            } else if (method.startsWith(EvmRpcMethod.personalSign)) {\n                this.#checkConnected();\n                let message = data?.params?.[0];\n                const from = data?.params?.[1];\n                if (!message || typeof message !== 'string') {\n                    throw rpcErrors.invalidParams('Invalid parameters: must provide a valid message.');\n                }\n                if (!from || typeof from !== 'string') {\n                    throw rpcErrors.invalidParams('Invalid parameters: must provide an Ethereum address.');\n                }\n                if (from.toLowerCase() !== this.selectedAddress?.toLowerCase()) {\n                    throw providerErrors.unauthorized();\n                }\n\n                if (!isHexString(message)) {\n                    message = addHexPrefix(Buffer.from(message).toString('hex'));\n                }\n                const uniq = ethereumUtils.isUniq(method);\n                const result = await this.signMessage(message as PrefixedHexString, uniq);\n                return result;\n            } else if (method === EvmRpcMethod.walletSwitchEthereumChain) {\n                return await requireNotNullish(window.particleAuth).ethereum.request(data);\n            } else if (method === EvmRpcMethod.ethSendTransaction) {\n                this.#checkConnected();\n                const chainId = Number(data.chainId || this.chainId);\n                const chain = chains.getEVMChainInfoById(chainId);\n                if (!chain) {\n                    throw providerErrors.chainDisconnected();\n                }\n                const txData = data.params?.[0] as any; // eslint-disable-line\n                if (!txData) {\n                    throw rpcErrors.invalidParams('Invalid parameters: must provide an transaction data.');\n                }\n                if (isNullish(txData.type)) {\n                    if (chains.isChainSupportEIP1559(chain)) {\n                        // set transaction default type \"0x2\", EIP1559.\n                        txData.type = '0x2';\n                    } else {\n                        txData.type = '0x0';\n                    }\n                }\n                if (isNullish(txData.chainId)) {\n                    txData.chainId = `0x${chainId.toString(16)}`;\n                }\n                if (isNullish(txData.nonce)) {\n                    txData.nonce = '0x0';\n                }\n                if (isNullish(txData.data)) {\n                    txData.data = '0x';\n                }\n                const result = await this.sendTransaction(txData);\n                return result;\n            } else {\n                throw providerErrors.unsupportedMethod();\n            }\n        } else {\n            return await requireNotNullish(window.particleAuth).ethereum.request(data);\n        }\n    }\n\n    #checkConnected() {\n        if (!this.isConnected()) {\n            throw providerErrors.unauthorized();\n        }\n    }\n}\n", "import { useParticleAuth } from '..';\n\nexport const useUserInfo = () => {\n    const { userInfo } = useParticleAuth();\n    return {\n        userInfo,\n    };\n};\n", "import { useEffect, useReducer } from 'react';\n\nexport const useIsMounted = () => {\n    const [mounted, setMounted] = useReducer(() => true, false);\n    useEffect(setMounted, [setMounted]);\n    return mounted;\n};\n", "import {\n    AuthCoreEvent,\n    AuthType,\n    SolanaRpcMethod,\n    check,\n    getLatestAuthType,\n    isConnected,\n    particleAuth,\n    requireNotNullish,\n} from '@particle-network/auth-core';\nimport { chains, type ChainInfo } from '@particle-network/chains';\nimport type { Transaction, VersionedTransaction } from '@solana/web3.js';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useCustomNavigate, useEvents, useModalOptions, useParticleAuth } from '..';\nimport { AuthError } from '../../api/model/authError';\nimport { AuthPage } from '../../components/customRouter';\nimport { isClient } from '../../utils';\nimport { getSolanaChain } from '../../utils/chain-utils';\nimport { SolanaWallet } from '../solanaWallet';\nimport { AuthCoreModalEvent } from '../types';\nimport { useAuthCore } from './useAuthCore';\nimport { useConnect } from './useConnect';\nimport { useUserInfo } from './useUserInfo';\n\nexport const useSolana = () => {\n    const navigate = useCustomNavigate();\n\n    const { events } = useEvents();\n\n    const [chainId, setChainId] = useState<number>(particleAuth.solana.chainId);\n\n    const [chainInfo, setChainInfo] = useState<ChainInfo>(\n        requireNotNullish(getSolanaChain(particleAuth.solana.chainId))\n    );\n\n    const [address, setAddress] = useState(particleAuth.solana.selectedAddress);\n\n    const { setAuthCoreModal } = useParticleAuth();\n\n    const { connect } = useConnect();\n\n    const { userInfo } = useUserInfo();\n\n    const { needRestoreWallet } = useAuthCore();\n\n    const { modalOptions } = useModalOptions();\n\n    const silentApprove = useMemo(() => {\n        if (\n            needRestoreWallet ||\n            userInfo?.security_account.has_set_payment_password ||\n            modalOptions.promptSettingConfig?.promptPaymentPasswordSettingWhenSign ||\n            getLatestAuthType() !== AuthType.jwt\n        ) {\n            return false;\n        }\n        return true;\n    }, [\n        userInfo?.security_account.has_set_payment_password,\n        needRestoreWallet,\n        modalOptions.promptSettingConfig?.promptPaymentPasswordSettingWhenSign,\n    ]);\n\n    useEffect(() => {\n        const onChainChanged = (chainId: number) => {\n            setChainId(chainId);\n        };\n        particleAuth.solana.on('chainChanged', onChainChanged);\n\n        const onConnect = () => {\n            setAddress(particleAuth.solana.selectedAddress);\n        };\n        particleAuth.solana.on('connect', onConnect);\n\n        setChainId(particleAuth.solana.chainId ?? 101);\n\n        const onDisconnect = () => {\n            setAddress(null);\n        };\n        particleAuth.solana.on('disconnect', onDisconnect);\n\n        const onRequestAccount = ({ resolve, reject, param }: any) => {\n            connect(param)\n                .then((userInfo) => {\n                    resolve(userInfo);\n                })\n                .catch((error) => {\n                    reject(error);\n                });\n        };\n        particleAuth.on(AuthCoreEvent.RequestSolanaAccount, onRequestAccount);\n\n        return () => {\n            particleAuth.solana.off('chainChanged', onChainChanged);\n            particleAuth.solana.off('connect', onConnect);\n            particleAuth.solana.off('disconnect', onDisconnect);\n            particleAuth.off(AuthCoreEvent.RequestSolanaAccount, onRequestAccount);\n        };\n    }, [connect]);\n\n    useEffect(() => {\n        if (chainId) {\n            setChainInfo(requireNotNullish(getSolanaChain(chainId)));\n        }\n    }, [chainId]);\n\n    const checkAuthCoreState = () => {\n        check(particleAuth, 'Please init first!');\n        check(isConnected(), AuthError.notLogin());\n        check(particleAuth.solana.selectedAddress, 'Please create wallet first!');\n    };\n\n    const signImpl = useCallback(\n        async <T>(state: { method: string; param: unknown; chainId?: number }): Promise<T> => {\n            checkAuthCoreState();\n            const result = await new Promise<T>((resolve, reject) => {\n                if (events.listenerCount(AuthCoreModalEvent.SignResponse) > 0) {\n                    reject(AuthError.pending('sign'));\n                } else {\n                    events.once(AuthCoreModalEvent.SignResponse, (response) => {\n                        if (response.error) {\n                            reject(response.error);\n                        } else {\n                            resolve(response.result);\n                        }\n                        setAuthCoreModal({ particleModalVisible: false });\n                    });\n                    navigate(AuthPage.SolanaSign, {\n                        replace: true,\n                        state,\n                    });\n                }\n            });\n            return result;\n        },\n        [navigate]\n    );\n\n    const signMessage = useCallback(\n        async (message: Uint8Array): Promise<Uint8Array> => {\n            if (silentApprove) {\n                const signature = await particleAuth.solana.signMessage(message);\n                return signature;\n            } else {\n                const signature = await signImpl<Uint8Array>({\n                    param: message,\n                    method: SolanaRpcMethod.signMessage,\n                });\n                return signature;\n            }\n        },\n        [signImpl, silentApprove]\n    );\n\n    const signTransaction = useCallback(\n        async <T extends Transaction | VersionedTransaction>(transaction: T, chainId?: number): Promise<T> => {\n            check(!chainId || chains.getSolanaChainInfoById(chainId), `The chainId: ${chainId} is not supported`);\n            if (silentApprove) {\n                const signature = await particleAuth.solana.signTransaction(transaction, chainId);\n                return signature;\n            } else {\n                const signature = await signImpl<T>({\n                    param: transaction,\n                    method: SolanaRpcMethod.signTransaction,\n                    chainId,\n                });\n                return signature;\n            }\n        },\n        [signImpl, silentApprove]\n    );\n\n    const signAllTransactions = useCallback(\n        async <T extends Transaction | VersionedTransaction>(transactions: T[], chainId?: number): Promise<T[]> => {\n            check(!chainId || chains.getSolanaChainInfoById(chainId), `The chainId: ${chainId} is not supported`);\n            if (silentApprove) {\n                const signature = await particleAuth.solana.signAllTransactions(transactions, chainId);\n                return signature;\n            } else {\n                const signature = await signImpl<T[]>({\n                    param: transactions,\n                    method: SolanaRpcMethod.signAllTransactions,\n                    chainId,\n                });\n                return signature;\n            }\n        },\n        [signImpl, silentApprove]\n    );\n\n    const signAndSendTransaction = useCallback(\n        async <T extends Transaction | VersionedTransaction>(transaction: T, chainId?: number): Promise<string> => {\n            check(!chainId || chains.getSolanaChainInfoById(chainId), `The chainId: ${chainId} is not supported`);\n            if (silentApprove) {\n                const signature = await particleAuth.solana.signAndSendTransaction(transaction, chainId);\n                return signature;\n            } else {\n                const signature = await signImpl<string>({\n                    param: transaction,\n                    method: SolanaRpcMethod.signAndSendTransaction,\n                    chainId,\n                });\n                return signature;\n            }\n        },\n        [signImpl, silentApprove]\n    );\n\n    const switchChain = useCallback(async (id: number) => {\n        await requireNotNullish(particleAuth, 'Please init first!').solana.switchChain(id);\n    }, []);\n\n    const enable = useCallback(async (): Promise<string> => {\n        await requireNotNullish(particleAuth, 'Please init first!').solana.connect();\n        return requireNotNullish(particleAuth.solana.selectedAddress);\n    }, []);\n\n    const wallet = useMemo(() => {\n        if (isClient() && window.particle?.solana) {\n            return window.particle?.solana;\n        } else {\n            const solanaWallet = new SolanaWallet();\n            solanaWallet.signMessage = signMessage;\n            solanaWallet.signTransaction = signTransaction;\n            solanaWallet.signAllTransactions = signAllTransactions;\n            solanaWallet.signAndSendTransaction = signAndSendTransaction;\n\n            if (isClient()) {\n                if (window.particle) {\n                    window.particle.solana = solanaWallet;\n                } else {\n                    window.particle = { solana: solanaWallet };\n                }\n            }\n\n            return solanaWallet;\n        }\n    }, []);\n\n    useEffect(() => {\n        if (wallet) {\n            wallet.signMessage = signMessage;\n            wallet.signTransaction = signTransaction;\n            wallet.signAllTransactions = signAllTransactions;\n            wallet.signAndSendTransaction = signAndSendTransaction;\n        }\n    }, [wallet, signMessage, signTransaction, signAllTransactions, signAndSendTransaction]);\n\n    return {\n        address,\n        chainId,\n        chainInfo,\n        switchChain,\n        signMessage,\n        signTransaction,\n        signAllTransactions,\n        signAndSendTransaction,\n        enable,\n        wallet,\n    };\n};\n", "import type { ConnectParam, RpcInput } from '@particle-network/auth-core';\nimport type { PublicKey, Transaction, VersionedTransaction } from '@solana/web3.js';\n\nexport class SolanaWallet {\n    readonly isParticleNetwork = true;\n\n    name = 'Particle';\n    url = 'https://particle.network';\n    icon = 'https://static.particle.network/wallet-icons/Particle.png';\n\n    on(event: string, listener: (...args: any[]) => void): this {\n        window.particleAuth?.solana.on(event, listener);\n        return this;\n    }\n\n    once(event: string, listener: (...args: any[]) => void): this {\n        window.particleAuth?.solana.once(event, listener);\n        return this;\n    }\n\n    off(event: string, listener: (...args: any[]) => void): this {\n        window.particleAuth?.solana.off(event, listener);\n        return this;\n    }\n\n    removeListener(event: string, listener: (...args: any[]) => void): this {\n        window.particleAuth?.solana.removeListener(event, listener);\n        return this;\n    }\n\n    get connecting(): boolean {\n        return window.particleAuth?.solana.connecting ?? false;\n    }\n\n    get connected(): boolean {\n        return window.particleAuth?.solana.connected ?? false;\n    }\n\n    async publicKey(): Promise<PublicKey | undefined> {\n        return window.particleAuth?.solana.publicKey();\n    }\n\n    get selectedAddress(): string | null {\n        return window.particleAuth?.solana.selectedAddress ?? null;\n    }\n\n    get chainId(): number {\n        return window.particleAuth?.solana.chainId ?? 101;\n    }\n\n    async connect(param?: ConnectParam): Promise<void> {\n        await window.particleAuth?.solana.connect(param);\n    }\n\n    async disconnect(): Promise<void> {\n        await window.particleAuth?.solana.disconnect();\n    }\n\n    signTransaction = async <T extends Transaction | VersionedTransaction>(\n        transaction: T,\n        chainId?: number\n    ): Promise<T> => {\n        throw new Error('signMessage not implemented.');\n    };\n\n    signAllTransactions = async <T extends Transaction | VersionedTransaction>(\n        transactions: T[],\n        chainId?: number\n    ): Promise<T[]> => {\n        throw new Error('signMessage not implemented.');\n    };\n\n    signAndSendTransaction = async <T extends Transaction | VersionedTransaction>(\n        transaction: T,\n        chainId?: number\n    ): Promise<string> => {\n        throw new Error('signMessage not implemented.');\n    };\n\n    signMessage = async (message: Uint8Array): Promise<Uint8Array> => {\n        throw new Error('signMessage not implemented.');\n    };\n\n    switchChain = async (chainId: number) => {\n        await window.particleAuth?.solana.switchChain(chainId);\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async request(data: Partial<RpcInput>): Promise<any> {\n        return window.particleAuth?.solana.request(data);\n    }\n}\n", "import { isServer } from '../../utils';\n\ntype Env = {\n    buyUrl: string;\n};\n\nclass GlobalConfig {\n    #devEnv: Env = {\n        buyUrl: 'https://ramp-debug.particle.network',\n    };\n\n    #stagingEnv: Env = {\n        buyUrl: 'https://ramp-staging.particle.network',\n    };\n\n    #productionEnv: Env = {\n        buyUrl: 'https://ramp.particle.network',\n    };\n\n    get env() {\n        if (!isServer() && window.__PARTICLE_ENVIRONMENT__ === 'development') {\n            return this.#devEnv;\n        } else if (!isServer() && window.__PARTICLE_ENVIRONMENT__ === 'staging') {\n            return this.#stagingEnv;\n        } else {\n            return this.#productionEnv;\n        }\n    }\n}\n\nconst globalConfig = new GlobalConfig();\nexport default globalConfig;\n"],
  "mappings": "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",
  "names": ["React", "AuthCoreEvent", "hasPaymentPassword", "isConnected", "particleAuth", "useCallback", "useEffect", "useState", "AuthCoreEvent", "EvmRpcMethod", "SolanaRpcMethod", "connect", "getConnectCaptcha", "getUserInfo", "isConnected", "particleAuth", "base58", "React", "useCallback", "useEffect", "useMemo", "useState", "React", "loading_default", "React", "path", "queryString", "Comp", "loading_default", "React", "useEffect", "useState", "React", "useMemo", "React", "React", "circle_close_default", "useMemo", "_a", "_b", "React", "circle_close_default", "particle_drawer_default", "useState", "useEffect", "_a", "React", "particle_drawer_default", "particle_modal_default", "React", "useEffect", "useRef", "isNullish", "tronAddressFromHex", "chains", "chains", "tronAddressFromHex", "isHexString", "isValidPhoneNumber", "isHexString", "isNullish", "particleAuth", "getUserInfo", "getUserInfo", "AuthCoreModalEvent", "getLatestAuthType", "useEffect", "AuthType", "isConnected", "isNullish", "requireNotNullish", "useCallback", "useEffect", "useMemo", "PromptSettingType", "events", "_a", "_b", "events", "useCallback", "connect", "isNullish", "AuthType", "requireNotNullish", "useEffect", "isConnected", "useMemo", "AuthCoreEvent", "AuthType", "EvmRpcMethod", "check", "getLatestAuthType", "isConnected", "particleAuth", "requireNotNullish", "chains", "useCallback", "useEffect", "useMemo", "useState", "isNullish", "particleAuth", "chains", "isHexString", "isHexString", "isHexString", "chains", "BigNumber", "BigNumber", "isTron", "isHexString", "chains", "isTron", "particleAuth", "chains", "isNullish", "isHexString", "isNullish", "requireNotNullish", "chains", "requireNotNullish", "isHexString", "chains", "isNullish", "events", "useState", "particleAuth", "requireNotNullish", "connect", "useMemo", "_a", "getLatestAuthType", "AuthType", "useEffect", "chainId", "userInfo", "AuthCoreEvent", "check", "isConnected", "useCallback", "EvmRpcMethod", "chains", "useEffect", "AuthCoreEvent", "AuthType", "check", "getLatestAuthType", "isConnected", "particleAuth", "requireNotNullish", "chains", "useCallback", "useEffect", "useMemo", "useState", "events", "useState", "particleAuth", "requireNotNullish", "connect", "useMemo", "_a", "getLatestAuthType", "AuthType", "useEffect", "chainId", "userInfo", "AuthCoreEvent", "check", "isConnected", "useCallback", "chains", "useEffect", "getLatestAuthType", "React", "useState", "props", "_a", "styles", "useCallback", "isConnected", "_b", "_c", "_d", "_e", "_f", "_g", "SolanaRpcMethod", "base58", "EvmRpcMethod", "getUserInfo", "useMemo", "useEffect", "AuthCoreEvent", "userInfo", "particleAuth", "getConnectCaptcha", "connect", "particle_modal_default", "events", "useState", "useCallback", "isConnected", "hasPaymentPassword", "useEffect", "particleAuth", "AuthCoreEvent"]
}
