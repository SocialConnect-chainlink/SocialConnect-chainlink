{
  "version": 3,
  "sources": ["../src/context/iframeWalletPlugin.tsx"],
  "sourcesContent": ["import { AuthCoreEvent, getUserInfo, isConnected } from '@particle-network/auth-core';\nimport { walletEntryPlugin } from '@particle-network/wallet';\nimport React, { useCallback, useEffect } from 'react';\nimport { useModalOptions } from '.';\nimport { useAuthCore, useConnect, useEthereum, useSolana } from './hooks';\n\nenum MessageType {\n    OpenAccountAndSecurity = 'open-account-and-security',\n    GetUserInfo = 'get-user-info',\n}\n\nconst IframeWalletPlugin = () => {\n    const { provider } = useEthereum();\n\n    const { wallet } = useSolana();\n\n    const { openAccountAndSecurity } = useAuthCore();\n\n    const { modalOptions } = useModalOptions();\n\n    const { connected } = useConnect();\n\n    const customEventHandler = useCallback(\n        async (messageType: string) => {\n            if (messageType === MessageType.OpenAccountAndSecurity) {\n                openAccountAndSecurity();\n            } else if (messageType === MessageType.GetUserInfo) {\n                return getUserInfo();\n            }\n        },\n        [openAccountAndSecurity]\n    );\n\n    useEffect(() => {\n        if (modalOptions.wallet?.visible !== false) {\n            const walletOptions = {\n                ...modalOptions.wallet,\n                erc4337: modalOptions.erc4337,\n                language: modalOptions.language,\n            };\n\n            walletEntryPlugin.init(\n                {\n                    projectId: modalOptions.projectId,\n                    clientKey: modalOptions.clientKey,\n                    appId: modalOptions.appId,\n                },\n                walletOptions\n            );\n            const onConnected = () => {\n                walletEntryPlugin.walletEntryCreate();\n            };\n            const onDisconnect = () => {\n                walletEntryPlugin.walletEntryDestroy();\n            };\n            if (typeof window !== 'undefined') {\n                window.particleAuth?.on(AuthCoreEvent.ParticleAuthDisconnect, onDisconnect);\n                window.particleAuth?.on(AuthCoreEvent.ParticleAuthConnect, onConnected);\n            }\n            if (isConnected()) {\n                walletEntryPlugin.walletEntryCreate();\n            }\n            return () => {\n                if (typeof window !== 'undefined') {\n                    window.particleAuth?.off(AuthCoreEvent.ParticleAuthDisconnect, onDisconnect);\n                    window.particleAuth?.off(AuthCoreEvent.ParticleAuthConnect, onConnected);\n                }\n            };\n        }\n    }, [\n        modalOptions.projectId,\n        modalOptions.clientKey,\n        modalOptions.appId,\n        modalOptions.wallet,\n        modalOptions.erc4337,\n        modalOptions.language,\n    ]);\n\n    useEffect(() => {\n        if (connected && modalOptions.wallet?.visible !== false) {\n            walletEntryPlugin.setWalletCore(\n                {\n                    ethereum: provider,\n                    solana: wallet,\n                },\n                customEventHandler\n            );\n        }\n    }, [connected, provider, wallet, modalOptions.wallet?.visible, customEventHandler]);\n\n    return (\n        <div id=\"auth-core-modal-wallet-plugin\" style={{ display: 'none' }}>\n            Wallet Plugin\n        </div>\n    );\n};\n\nexport default IframeWalletPlugin;\n"],
  "mappings": ";;;;;;;;;;;AAAA,SAAS,eAAe,aAAa,mBAAmB;AACxD,SAAS,yBAAyB;AAClC,OAAO,SAAS,aAAa,iBAAiB;AAS9C,IAAM,qBAAqB,MAAM;AAXjC;AAYI,QAAM,EAAE,SAAS,IAAI,YAAY;AAEjC,QAAM,EAAE,OAAO,IAAI,UAAU;AAE7B,QAAM,EAAE,uBAAuB,IAAI,YAAY;AAE/C,QAAM,EAAE,aAAa,IAAI,gBAAgB;AAEzC,QAAM,EAAE,UAAU,IAAI,WAAW;AAEjC,QAAM,qBAAqB;AAAA,IACvB,OAAO,gBAAwB;AAC3B,UAAI,gBAAgB,0DAAoC;AACpD,+BAAuB;AAAA,MAC3B,WAAW,gBAAgB,mCAAyB;AAChD,eAAO,YAAY;AAAA,MACvB;AAAA,IACJ;AAAA,IACA,CAAC,sBAAsB;AAAA,EAC3B;AAEA,YAAU,MAAM;AAjCpB,QAAAA,KAAA;AAkCQ,UAAIA,MAAA,aAAa,WAAb,gBAAAA,IAAqB,aAAY,OAAO;AACxC,YAAM,gBAAgB;AAAA,QAClB,GAAG,aAAa;AAAA,QAChB,SAAS,aAAa;AAAA,QACtB,UAAU,aAAa;AAAA,MAC3B;AAEA,wBAAkB;AAAA,QACd;AAAA,UACI,WAAW,aAAa;AAAA,UACxB,WAAW,aAAa;AAAA,UACxB,OAAO,aAAa;AAAA,QACxB;AAAA,QACA;AAAA,MACJ;AACA,YAAM,cAAc,MAAM;AACtB,0BAAkB,kBAAkB;AAAA,MACxC;AACA,YAAM,eAAe,MAAM;AACvB,0BAAkB,mBAAmB;AAAA,MACzC;AACA,UAAI,OAAO,WAAW,aAAa;AAC/B,qBAAO,iBAAP,mBAAqB,GAAG,cAAc,wBAAwB;AAC9D,qBAAO,iBAAP,mBAAqB,GAAG,cAAc,qBAAqB;AAAA,MAC/D;AACA,UAAI,YAAY,GAAG;AACf,0BAAkB,kBAAkB;AAAA,MACxC;AACA,aAAO,MAAM;AA9DzB,YAAAA,KAAAC;AA+DgB,YAAI,OAAO,WAAW,aAAa;AAC/B,WAAAD,MAAA,OAAO,iBAAP,gBAAAA,IAAqB,IAAI,cAAc,wBAAwB;AAC/D,WAAAC,MAAA,OAAO,iBAAP,gBAAAA,IAAqB,IAAI,cAAc,qBAAqB;AAAA,QAChE;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ,GAAG;AAAA,IACC,aAAa;AAAA,IACb,aAAa;AAAA,IACb,aAAa;AAAA,IACb,aAAa;AAAA,IACb,aAAa;AAAA,IACb,aAAa;AAAA,EACjB,CAAC;AAED,YAAU,MAAM;AA9EpB,QAAAD;AA+EQ,QAAI,eAAaA,MAAA,aAAa,WAAb,gBAAAA,IAAqB,aAAY,OAAO;AACrD,wBAAkB;AAAA,QACd;AAAA,UACI,UAAU;AAAA,UACV,QAAQ;AAAA,QACZ;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ,GAAG,CAAC,WAAW,UAAU,SAAQ,kBAAa,WAAb,mBAAqB,SAAS,kBAAkB,CAAC;AAElF,SACI,oCAAC,SAAI,IAAG,iCAAgC,OAAO,EAAE,SAAS,OAAO,KAAG,eAEpE;AAER;AAEA,IAAO,6BAAQ;",
  "names": ["_a", "_b"]
}
